|#############################################################################################################|
1. 磁碟陣列RAID  ---> 可總結為: 同時對多個硬盤進行操作的技術
reference:
https://www.youtube.com/watch?v=EZMgsyasAwU
https://www.zhihu.com/question/451965570
	A. 使用背景:
		a. 我們一般若需要擴大儲存容量, 都會加裝更多硬碟, 若是想增加"讀寫速度"和"容錯能力", 可以採用RAID

	B. 基本原理:
		b. 讀寫速度提升:
			I. 由於硬碟的讀寫速度上限是固定的, 而CPU的速度又比硬碟讀寫快很多, 理論上CPU能同時處理很多個硬碟的讀寫, 在有很多硬碟的情況下, 如果一次只操作一個硬碟, 其他硬碟都會處於閒置狀態, 若我們能善用這些閒置的硬碟, 讓所有硬碟同時(並行)讀寫資料, 這樣效率會大大提升, 這就是raid對讀寫速度提升的基本原理, 讓多個硬碟同時參與讀寫.

		c. 可靠性(容錯能力)提升:
			I. 鏡像: 鏡像和備份的差異在於鏡像是實時的,他會把所有資料(包含作業系統, 應用程式, 任何的數據)實時做成兩份(或多份)一模一樣的(你只要同時寫入或修改一模一樣的數據), 包含作業系統, 存取單元等等, 所有鏡像都是真正的本體, 沒有主次之分(這個概念在鏡像服務器也是一樣的).

			II. 校驗資料: 將資料分塊, 每一塊都有各自的"校驗塊", 當對應的資料塊損毀時, 該校驗塊即能恢復資料塊, 算是變相的備份, 有點像是"壓縮後的備份資料", 但二者還是有區別, "校驗塊"的本質是"冗於訊息(這在網路研究中出現過多次)", 其次校驗塊是實時更新的, 每次寫入操作多對相應的更新校驗信息.  而且你若是把某個資料誤刪了, "校驗塊"也無法復原你想恢復的數據, 因為對應的校驗塊也被刪除了, 他是實時更新的! "校驗塊"只能在一個硬盤壞掉時, 他能恢復對應的數據. 但他關鍵的優勢也是"實時", 因為"備份方法"無法做到實時, 你如果硬盤壞掉了, 你要回復"當下的數據", 你便可透過"校驗快"回復當下的數據狀態, 這讓你的系統不會有數據上的斷層. 你如果使用備份來還原, 你只能回復到"之前"的數據.    同時也要注意一點, 通常"校驗塊"會與他對應的數據分布在不同硬盤(), 這通常是由算法實現的. 如果"校驗塊"與她對應的數據塊分布在同一個硬盤, 那該硬盤損壞了, "數據塊"與"校驗塊"便同時損毀, 沒有實際作用了.

	C. 不同級別(沒有高低之分, 應用的地方不同)
		a. RAID 0 (stripes, 條代化)   -----> 寫入速度最快, 但可靠性最低
			I. 優點:
				🤔. 若有兩個硬盤, 則將資料切成兩塊, 同時寫入兩個硬盤, 速度比一個時間只寫入一個硬盤要快一倍, 讀取的時候, 兩個硬盤同時讀(資料被切成兩塊, 同時讀取不同塊, 再組合在一起), 讀也快兩倍
				🤔. 你若是有100個硬盤, 讀寫速度就比單個硬盤快100倍

			II. 缺點:
				🤔. 數據沒有任何可靠性機制, 只能透過外部備份
				🤔. 營盤若損毀了, 數據沒有辦法實時還原, 透過外部備份來還原, 頂多只能還原到"之前"的狀態

		b. RAID 1 (mirroring, 鏡像) ----> 寫入速度最慢, 但可靠性最高
			I. 優點:
				🤔. 採用"鏡像", 每一個硬盤都是彼此的"鏡像", 由此在一個硬盤發生損毀時, 其他鏡像可以補上
				🤔. 你越多硬盤就越多鏡像, 硬碟損毀風險承受度就越高

				🤔. 讀取速度與RAID 0理論上接近, RAID1 can be just as fast as RAID0 as for reading, because it could read in the very same way as RAID0's do. Better yet, since all disks contain all data, there is no requirement anymore to read from a specific disk; as both disks contain the same data striping can be done more efficiently.  So, RAID1 should be faster than RAID0 for random read, and at least the same as for sequential read. Unfortunately, only UNIX RAID drivers like geom_mirror implement things like load balancing and round robin algoritms on the RAID1 layer.


			II. 缺點:
				🤔. 你的寫入速度跟一個時間只寫入一個硬盤是一樣的, 沒有任何優勢, 你每次寫入時都是"同時"在所有硬盤上寫入"相同"的數據, 藉此達到"鏡像", 但是因為你同時寫入相同的資料, 從結果來看, 同一個時間你只有寫入一份資料, 不像RAID 0同一個時間寫入好幾份資料(分割)

				🤔. 100個硬碟也無法提升任何寫入速度, 但讀取速度理路能上不會與RAID 0差太多
		c. RAID 2, 3, 4 ---> 設計時有些缺陷, 因此食用上不常用到

		d. RAID 5  ---> 比較常使用的一種RAID
			I. 優點:
				🤔. 算是在RAID 0的基礎上加上了分布式"校驗塊(parity block)"的概念, 他具有略遜於RAID 0的"讀取"速度(寫入速度因為計算校驗費時反而下降了), 同時又提供了一定的"可靠性(容錯能力)"

				🤔. 將數據分成塊分布在多個硬盤, 且將具有恢復數據能力的"校驗塊"也分布在多個硬盤, 當某個硬盤損毀時, "校驗塊"可以恢復對應數據

				🤔. RAID 5採用了Parity calculation機制, 以下是chatgpt給出的精彩範例, 根據這個範例, 你能知道RAID 5採用了很聰明的方法, 使得check block只需要占用一個硬碟容量(無論總共有多少硬碟), 就能恢復任意受損硬碟的數據!! 我們直覺上會認定, 越多數據, 應該要要越多的空間來存"校驗塊", 但是Parity calculation保證了不需要更多空間!!!非常聰明!!!:

					Assume we have a RAID 5 array with three disks (Disk A, Disk B, Disk C). We will write two stripes of data to the disks, including parity calculations.

					Stripe 1 Data and Parity Calculation
						Data:
							Disk A: Data Block 1 (D1) = 0101 (binary)
							Disk B: Data Block 2 (D2) = 0011 (binary)
						Parity Calculation (P1):
							Disk C: Parity Block 1 (P1) = D1 ⊕ D2
						Calculation: 
							0101 ⊕ 0011 = 0110 (binary)
						So, Stripe 1 is stored as:
							Disk A: D1 = 0101
							Disk B: D2 = 0011
							Disk C: P1 = 0110
					Stripe 2 Data and Parity Calculation
						Data:
							Disk A: Data Block 3 (D3) = 1100 (binary)
							Disk C: Data Block 4 (D4) = 1010 (binary)
						Parity Calculation (P2):
							Disk B: Parity Block 2 (P2) = D3 ⊕ D4
						Calculation: 
							1100 ⊕ 1010 = 0110 (binary)
						So, Stripe 2 is stored as:
							Disk A: D3 = 1100
							Disk B: P2 = 0110
							Disk C: D4 = 1010
					Data Storage Summary
						Stripe 1:
							Disk A: 0101
							Disk B: 0011
							Disk C: 0110 (Parity)
						Stripe 2:
							Disk A: 1100
							Disk B: 0110 (Parity)
							Disk C: 1010

					Parity Calculation and Recovery
					Let's simulate a disk failure and recovery process.

					Disk Failure Example
					Assume Disk B fails. The data on Disk B includes D2 and P2.

					Data Recovery Steps
						Recover D2 using D1 and P1:
							We know: P1 = 0110, D1 = 0101
							Calculation: D2 = P1 ⊕ D1
							Calculation: 0110 ⊕ 0101 = 0011
						Recover P2 using D3 and D4:
							We know: D3 = 1100, D4 = 1010
							Calculation: P2 = D3 ⊕ D4
							Calculation: 1100 ⊕ 1010 = 0110

					Now we have successfully recovered the data from Disk B:
						D2 = 0011
						P2 = 0110


			II. 缺點:
				🤔. 寫入性能低, 每次写入操作都涉及到读旧数据块、读旧校验块、计算新校验块和写入新数据块与校验块，这增加了写操作的开销。特别是在写操作频繁的场景下，性能会受到较大影响. 速度甚至可能比raid 1或是不做raid還慢

				🤔. 复杂性和成本：
					😄. 实现复杂性：RAID 5 的实现比 RAID 0 和 RAID 1 复杂，需要更复杂的控制器和软件支持。
					😄. 硬盘数量要求：RAID 5 至少需要三个硬盘才能工作，相比 RAID 1（至少两个硬盘, 一個壞了還能挺住）对硬盘数量有更高的要求。

				🤔. 空间利用率略低, 校验块占用空间, 虽然 RAID 5 的空间利用率比 RAID 1 高，但还是要牺牲一个硬盘的容量用于存储校验块。例如，N 个硬盘中，有 N-1 个硬盘的总容量可以用于存储实际数据。

		e. RAID 6
			I. 總結來說: raid 6是根據raid 5的基礎, 然後針對可靠性做了更好的提升, 最少需要4個硬盤(若兩個壞了還能挺住)

		f. 混合型RAID: "RAID10", 融合了RAID 1和RAID 0
			I. 優點:
				🤔. 兼具了效率和可靠性
				🤔. 他採用兩兩互為"鏡像", "每一對鏡像"採用RAID 0的方式存入資料份快, 
				🤔. 寫入速度理論上會是RAID 0的一半(因為你要存鏡像)
				🤔. 讀取速度略低於RAID 0

			II. 缺點:
				🤔. 高成本：需要双倍的硬盘数量来实现镜像，因此硬件成本较高。
				🤔. 低存储效率：因为一半的存储容量用于镜像，存储利用率只有 50%。
				🤔. 硬盘数量要求：需要至少 4 个硬盘，并且硬盘数量通常为偶数，以确保镜像对的平衡。
			
				
			
|#############################################################################################################|
2. 計算機內如何計時
	A. 實時鐘（RTC, Real-Time Clock）：
		a. 計算機主板上有一個獨立的電池供電的實時鐘。RTC在計算機關機時也會保持運行，確保系統在重新啟動時有一個基本的時間參考。
	B. 系統時鐘（System Clock）：
		a. 計算機啟動後，操作系統會從RTC讀取當前時間並初始化系統時鐘。系統時鐘通常是一個軟件計時器，它依賴於CPU的時鐘中斷來保持計時。
		b. 持續運行：在計算機開機後，系統時鐘會從RTC讀取時間並初始化，之後會一直運行並更新系統的當前時間，直到系統關機。
		c. 主要用途：提供當前的日期和時間信息，供操作系統和應用程序使用。
	C. 高精度計時器（High Precision Event Timer, HPET）：
		a. 現代計算機中常用的高精度計時器，可以提供納秒級的時間計算精度。HPET比傳統的系統時鐘和RTC提供了更高的計時精度。
		b. 按需使用：HPET通常在需要高精度計時的情況下啟動，例如多媒體應用、精確延時計算等。
		c. 系統支持：現代操作系統會根據需要配置和使用HPET，但它不會像系統時鐘那樣持續運行。
	D. 內核定時器（Kernel Timers）：
		a. 操作系統內核使用的定時器，用於管理計算機內部的各種計時任務，例如任務調度和系統延時等。
		b. 按需使用：內核定時器在需要執行特定計時任務時啟動，例如操作系統調度、計時事件管理、系統延時等。
		c. 多樣化計時：內核定時器的計時任務是根據操作系統的內部需求來決定的，不會一直持續運行。
	E. TSC（Time Stamp Counter）：
		a. 這是一個由CPU提供的計數器，記錄自啟動以來經過的時鐘週期數。它提供了非常高的精度，但由於可能受到CPU頻率變化的影響，不適合作為唯一的時間計算手段。
		b. 隨時可用：TSC在CPU啟動後便開始計數，記錄自啟動以來經過的時鐘週期數。它可以隨時被操作系統或應用程序讀取，用於高精度的性能測量和計算。
		c. 按需讀取：儘管TSC一直在運行，但它的數據只有在需要時才會被讀取和使用，例如性能分析或計時操作。
	F. NTP（Network Time Protocol）：
		a. 用於同步計算機與互聯網上的時間伺服器的時間。NTP可修正本地時鐘的誤差，確保時間的準確性和一致性。
	

|#############################################################################################################|
3. 如何對文字進行編碼(encoding)	
reference:
https://www.zhihu.com/question/23374078
	A. Ascii --> 最早的encoding, 一個character用一個byte表示, 這也是byte成為"字節"的原因
	B. Unicode 
	C. UTF-8
