|#############################################################################################################|
1. MAC(media access control) 地址:
	A. 48位元(bit)組成, 或也可以說 6位元組(byte)
	B. 16進制表示
	C. 通常8位元(bit)一組
	D. 範例: 00:1A:2B:3C:4D:5E
	E. 總數: 2^48 ~ 281兆
	F. 是網路卡的唯一地址, 訊號依照MAC地址決定傳送給誰(注意, 網路卡沒有IP地址, 別誤會!!)
		a. 有線網路卡(現在很多筆記本電腦都沒有了, 要額外裝)
			I. 使用ethernet 協議
		b. 無線網路卡
			I. 使用wifi協議
		c. 其實網路卡mac地址可以手動改, 瞎改没什么坏处, 但是跟网内的MAC冲突就会出现问题, 但是你随便改一个冲突的概率微乎其微, 快赶上彗星撞地球了. 当然, 有时候需要刻意去修改MAC, 比如有的运营商为了防止多用户共享网络, 会绑定MAC地址到指定设备, 因此有的路由器提供MAC地址克隆功能

|#############################################################################################################|
2. 乙太網路包(ethernet packet) 和 Frame(訊框, 第二層的傳輸單位PDU, 包含在ethernet packet), 以下是組成, 照順序
	A. Preamble(乙太packet的一部分, 不是frame的一部分):
		a. 固定7位元組(byte)
	
	B. Start frame delimeter(SFD, 乙太packet的一部分, 不是frame的一部分):
		a. 固定1位元組(byte)
		b. 表示frame開始
	
	C. Frame:
		a. header(total 14位元組(byte)):
			I. MAC destination(Frame header的一部分): 
				🤔. 固定6位元組(byte)

			II. MAC source(Frame header的一部分):
				🤔. 固定6位元組(byte)

			III. Ethertype(Ethernet II) or length(IEEE 802.3), (Frame的一部分):
				🤔. 固定2位元組(byte)

		d. Payload(大小不固定):
			I. 42~1500位元組(byte)
				🤔. 包含各層的包
				🤔. 最大上限為通常為1500 byte, 此上限稱之為MTU(Maximum Transmission Unit, byte為單位)
					😄. 注意! 只有乙太網路和wifi的frame payload的MTU才是1500上限, 其他協議有各自的上限(自己wiki查看MTU)

		C. Tail(Frame Check Sequence, FCS)
			a. 4位元組(byte)	
			b. frame傳輸過程有錯誤或損毀, 從此處輔助復原
			c. 採用循環冗餘檢驗(Cyclic Redundancy Check, CRC):
				🤔. 利用模2除法原理(mod 2)

	D. Interpacket gap(IPG)
		a. 固定12位元組(byte)
		b. 表示frame結束, 並提供足夠的長度時間

|#############################################################################################################|
3. 連接, 非連線, 可靠, 非可靠
reference:
https://www.zhihu.com/question/289026686

	A. 連接導向(Connection-oriented Service, CS), 又叫做(可靠, reliable connection)
		a. 有建立"對話線路(session)"
		b. 確保數據(或訊息)可以按照"順序"抵達
		c. 採用類似"電話模型"的機制
			I. 你打電話需要撥號, 然後建立連線
			II. 雙方需要建立"對話(session)"
			III. 連線建立後, 雙方知道彼此正在"通話(互傳訊息)", 即使雙方甚麼訊息都沒傳送
			IV. 結束通話後, 代表雙方都知道彼此不再傳送訊息

	B. 非連接服務(Connectionless Service), 又叫做
		a. 無建立"對話線路(session)"
		b. 數據(或訊息)不一定按照"順序"抵達
		c. 採用類似"郵政模型"的機制
			I. 你寄信前不用跟人打招呼
			II. 雙方不用建立連線
			III. B傳送訊息給A前, A可能不知道B要傳送訊息給他(反之亦然)
			IV. B若不傳信訊息給A, A也不會知道, 兩者之間沒有一個"對話連線"機制


	C. 可靠(reliable)
		a. 有接收確認機制(ack)
		b. 發送端能確定接收端"收到了"
		c. ack機制能確保data不會丟失

	D. 非可靠(unreliable)
		a. 無確認接收機制, no ack
		b. 發送端不管對方收到沒, 也無法管
		c. 無法保證data有無丟失
	

|#############################################################################################################|
4. 流量控制(flow control)
	A. sliding window

|#############################################################################################################|
5. 錯誤控制(errorControl)
	A. 錯誤偵測(Error Detection)
		a. 同位元檢查(parity check)
		b. 檢查集(Check sum, CS)
		c. 循環多餘碼檢查法(Cycle Redundancy Check, CRC), 一般都是用這個

	B. 自動回覆請求(Automatic Repeat Request, ARQ):
		a. 停止與等待ARQ(Stop-and-Wait Automatic Repeat Request)
		b. 退後N ARQ(Go-Back_N Automatic Repeat Request)
		c. 選擇性重複 ARQ(Select-Repeat Automatic Repeat Request)--->大部分都用這個(例如TCP)

|#############################################################################################################|
6. 存取機制(電腦和電腦的連線方式), 或者說網路架構
	A. 點對點(point to point policy)
		a. 環狀網路就是典型例子:
			I. 例如: A_PC連B_PC連C_PC連D_PC連A_PC

	B. 多重存取(Multiple Access policy)
		a. 匯流排架構(bus), 
		b. 廣播data, 讓所有人都收到
		c. 用mac address來判斷, 不是給自己的再丟掉
		d. 採用CSMA/CD
		e. 可能需要hub

	C. 交換(Switching policy): ------>現在都用這種了
		a. 星狀網路(switch在中間作為中繼站)
		d. 大部分都是"全雙工(full duplex)"
		c. 需要交換器(switch)
			switch 原理:
			
	
