|#############################################################################################################|
1. 網頁相關
	A. HTTP ---> 建立在TCP/IP之上
		a. HTTP方法:
		reference:
		https://www.zhihu.com/question/533810340
			I. GET -->常用
				🤔. 用於從服務器獲取資源。GET 方法請求指定的資源，並將其返回給客戶端
			II. POST  -->常用
				🤔. 用於向服務器提交數據。POST 方法將數據提交給服務器，通常用於創建新資源或提交表單數據
			III. PUT
				🤔. 用於更新現有資源。PUT 方法將指定的資源放置到服務器上，如果該資源已存在，則將其更新為請求中指定的內容。
			IV. DELETE
				🤔. 用於刪除指定的資源。DELETE 方法將指定的資源從服務器上刪除。
			V. PATCH
				🤔. 用於對資源的部分更新。PATCH 方法用於將局部更新應用於資源，僅更新指定的資源字段，而不是整個資源。

		b. 狀態碼:
			I. 200: 成功
			II. 404(客戶端錯誤): 表示資源找不到
			III. 500(服務端錯誤): 表示內部服務器錯誤(通常是後端程式哪裡有錯)

		c. HTTP headers(常見):
			I. 請求(request)
				🤔. User-Agent, host, accept, 
			II. 響應(response)
				🤔. Server
				🤔. Content-Type
				🤔. Content-Length
		
		d. 特性:
			I. 無狀態(stateless): 每次請求都是獨立的，服務器不保存客戶端的狀態信息。這就意味著每次請求需要攜帶所有必要的信息，例如 cookie、session ID 等。HTTP/1.1 支持持久連接（Keep-Alive）以減少 TCP 連接的開銷，HTTP/2 使用多路複用（Multiplexing）提高效率等

			II. 無連接(connectinoless), TCP是有連線的, 所以HTTP事實上每次request都建立一次TCP連線, request結束後再斷開(因此還是算他沒有連接), http發明的時候, 靜態網頁居多, 一個用戶的request, 通常是間歇性的, 就好像你打電話過去, 只是講了一句話, 然後等了10分鐘才講了第二句話, 這十分佔用連線資源, 為了減少"TCP連線"占用資源, 才讓http"無連線", 但是隨著網路發展, 一個用戶的request的間歇性降低, 每次request都要重新連結TCP是很沒效率的, 因此才有Keep-Alive, 讓TCP可以持續連線一段時間, 現在大部分的keep-alive功能都是預設開啟的, reference如下:
					https://www.twblogs.net/a/5b983fdd2b717736c62321bf

		e. HTTP版本:  ----> 這個是由使用者想要訪問的網站server所決定的, 與broswer沒有任何關係, 你只要curl 過去看他的header回應就知用哪個版本了, 通常是HTTP/1.1(至少現在是這樣)
			I. HTTP/1.0 -- released in 1996
				🤔. 這是HTTP的最初版本，它使用單個TCP連接處理每個HTTP請求，並且每個請求都會單獨返回一個響應。
			II. HTTP/1.1 -- released in 1999
				🤔. 這是HTTP的主流版本，引入了持久連接（persistent-connections）和管道化（pipelining）等特性，以減少建立和關閉TCP連接的次數，提高了效率。持久連接並不會持續到永遠, 而是由keep-alive 標頭協商控制, 此頭通常包含timeout(到期時間), max(關閉前允許最大請求數量).   持久連接機制使得1个 TCP 连接可以被多个请求/响应对重复使用，从而减少了连接建立和断开的开销。HTTP/1.1 默认启用持久连接，除非客户端或服务器明确要求关闭连接。

				🤔. HTTP/1.1：虽然支持持久连接，但一次只能处理一个请求/响应对。即使在一个连接中发送多个请求，这些请求也必须按顺序处理，称为“队头阻塞”（Head-of-Line Blocking）。

			III. HTTP/2.0 -- released in 2015
			reference:
			https://zhuanlan.zhihu.com/p/577948122
				🤔. 這是HTTP/1.1的後繼版本，通過多路徑複用（multiplexing）, 允许在一个 TCP 连接中同时发送多个请求和响应，这大大提高了性能和资源利用率, 也使用了壓縮標頭等技術，進一步提高了性能和效率。
				🤔. HTTP/2.0：引入了真正的多路复用（Multiplexing）。多个请求和响应可以并行在同一个连接中进行，不再需要按顺序等待。每个请求/响应对被分成更小的帧（Frames），这些帧可以交错发送，服务器可以按需调度和发送。
			IV. HTTP/3.0 -- released in 2020
				🤔. 這是HTTP/2的進一步改進版本，採用了基於UDP的傳輸協議QUIC，以降低連接建立的延遲和提高安全性。 你可以注意到此版本採用了基於UDP!! HTTP之所以一開始採用TCP, 是因為TCP在當時網路環境中非常普及, 且具備可靠性, UDP雖然低延遲, 但是不可靠, 但近年來對於底延遲的要求提高, 因此誕生了新技術QUIC, QUIC基本上是設法在TCP和UDP之间取得一个平衡点，结合了TCP的可靠性和连接管理功能，以及UDP的低延迟和灵活性. 以下是關於QUIK的一些基本特性:
					😄. 错误恢复： QUIC内置了错误恢复机制，可以在数据传输中检测并纠正错误。即使在UDP包丢失或乱序的情况下，QUIC也可以通过重传和确认机制来保证数据的可靠传输。

					😄. 连接管理： QUIC提供了完善的连接管理功能，包括连接建立、保持和终止等，与TCP类似。这使得HTTP/3在使用UDP作为传输层时，也能够实现类似于TCP的连接管理功能。

					😄. 多路复用： QUIC支持多路复用，可以在单个连接上同时传输多个数据流，从而提高了传输效率和利用率。这对于减少连接建立的延迟和减少头部开销非常有益。

					😄. 零RTT握手： QUIC支持零往返时间（Zero Round Trip Time，0-RTT）握手，可以在一次握手中完成连接建立和加密握手，从而减少了连接建立的延迟。
			

		f. web版本:
			I. Web 1.0：
				🤔. 描述： Web 1.0 是互联网发展的早期阶段，大约在1990年代末至2000年代初期。在这个阶段，互联网主要是由静态网页组成，用户主要是被动地浏览信息，网站通常由少数人编辑和更新。用户交互性较低，大多数网站都是提供信息和内容的单向发布平台。
				🤔. 特点： 静态网页、被动浏览、信息发布、用户交互较少。

			II. Web 2.0：
				🤔. 描述： Web 2.0 是在 Web 1.0 基础上的一次重大升级，大约出现在2000年代中期至晚期。Web 2.0 的主要特点是用户生成内容（User Generated Content）和用户参与互动（User Engagement）。这一阶段出现了诸如社交网络、博客、维基百科等新型网站，用户可以更积极地参与、共享和创造内容。
				🤔. 特点： 用户生成内容、社交网络、用户参与、互动性增强。

			III. Web 3.0：
				🤔. 描述： Web 3.0 是对未来互联网发展的一种设想，也被称为“语义网”（Semantic Web）或“智能网”（Intelligent Web）。这一阶段的互联网将更加智能化，能够理解、推断和解释人类语言和行为，实现真正的人机交互。Web 3.0 的主要特点是人工智能、大数据、区块链等新技术的广泛应用，以及更加智能和个性化的服务和体验。
				🤔. 特点： 人工智能、大数据、语义理解、个性化服务。


		e. HTTPS:
			I. HTTP 使用明文傳輸，安全性較低，而 HTTPS 使用 SSL/TLS 加密通信，安全性較高。HTTPS 的 URL 以 "https://" 開頭，通常用於安全敏感的場景，如網上銀行、購物網站等

		f. 登入認證機制
			I. session
			II. cookie
				🤔. 瀏覽器用來存取使用者"狀態"用的, 因為http本身無狀態
			III. token
				🤔. 採用每次發送都計算token, 接收方收到token在驗證是否正確, token會加密, 中途攔截到了沒用


|#############################################################################################################|
2. 電子郵件相關 ----> 雖然現在通訊軟體十分發達, 但是正式的電子文書通訊都還是透過電子郵件居多, 所以要會 
reference:
https://zhuanlan.zhihu.com/p/141472142
https://kknews.cc/code/a4k2k5g.html
	A. 傳統電子郵件架構組成
		a. 用户代理(User Agents)  ----> 就像我们常常使用的邮箱客户端，我们能直接接触的部分
			I. 允许用户阅读,回复,转发,保存,编辑邮件消息
			II. 例如:Outlook, foxmail等
			III. 发送, 接收邮件消息到/从服务器
			IV. 运行邮件协议
		b. 邮件服务器(Mail Server) 
			I. 邮箱mailbox 存放用户接收的邮件消息
			II. 外出报文队列outgoing message queue
			III. 运行邮件协议
		c. 邮件协议
			I. 分类
				🤔. 邮件传输协议  ---> 传输邮件消息到服务器
					😄. SMTP(簡單郵件傳輸協議, Simple Mail Transfer Protocol) ----> 基於TCP
						😄. 基本設定
							😄. 客户使用TCP来可靠传输邮件消息到服务器
							😄. 端口号25
							😄. 直接传送: 发送服务器到接收服务器
							😄. 传输的3个阶段
							😄. 握手 (问候)
							😄. 邮件消息的传输
							😄. 结束
						😄. 基本傳輸流程
							😄. Alice使用用户代理编写邮件消息(给bob@someschool.edu的)
							😄. Alice的用户代理发送邮件消息 到她的邮件服务器;邮件消息存放在邮件消息队列
							😄. Alice邮件服务器的SMTP客户端发起建立一个到Bob的邮件服务器的SMTP服务器端的TCP连接,经过应用层握手.
							😄. SMTP客户在这个TCP连接上发送Alice的邮件消息
							😄. Bob服务器存放邮件消息存到 Bob的邮箱
							😄. Bob调用他的用户代理读邮件消息
							
				🤔. 邮件接收协议 ---> 从服务器获取邮件消息
				reference:
				https://www.cloudflare.com/zh-tw/learning/email-security/what-is-imap/
					😄. POP3 (Post Office Protocol 3)  --->從server抓郵件消息到本地, 並刪除server上的對應郵件數據 ---->此法現在很少再用了
						😄. 基本設定
							😄. POP: Post Office Protocol 邮局协议[RFC 1939]
							😄. 110端口号
							😄. 身份认证 (代理 <-->服务器) 并下载邮件消息
							😄. IMAP: Internet Message Access Protocol [RFC 3501]
							😄. 143端口
							😄. 更多功能特征 (更复杂!)
							😄. 允许用户像对待本地邮箱那样操纵远程邮箱的邮件
							😄. HTTP: Hotmail , Yahoo! Mail, etc.
						😄. 基本性質
							😄. 預設情況下，電子郵件只能從下載電子郵件的裝置存取。(也就是只能有一台設備可以存取到該郵件, 這點很不方便)
							😄. 下載後，除非另有設定，否則電子郵件將從伺服器中刪除。
							😄. 電子郵件可離線存取，但只能在下載電子郵件的裝置上存取。
							😄. 預設情況下，電子郵件會下載到裝置，因此訊息可能需要更長的時間才能載入。
							😄. POP3 可節省電子郵件伺服器儲存空間，因為電子郵件會自動從伺服器刪除。
					😄. IMAP (Internet Message Access protocol) --->不會抓取郵件到本地 ---->此法多為現代郵件系統使用
						😄. 基本性質
							😄. 使用者可以從任何裝置存取其電子郵件。	
							😄. 伺服器儲存電子郵件；IMAP 充當伺服器和用戶端之間的中繼。	
							😄. 電子郵件無法離線存取。	
							😄. 在使用者點擊之前，不會下載電子郵件的內文，但主旨行和寄件者名稱會迅速出現在電子郵件用戶端中。	
							😄. IMAP 需要更多的伺服器空間，因為電子郵件不會自動從伺服器中刪除。	


|#############################################################################################################|
3. 檔案傳輸
	A. FTP

 
|#############################################################################################################|
4. 遠程登入
	A. SSH

|#############################################################################################################|
5. 網路相關
	A. DNS(Domain name system)  ---->建立在UDP之上	
	reference:
	https://www.stockfeel.com.tw/dns-%E4%BC%BA%E6%9C%8D%E5%99%A8%E6%98%AF%E4%BB%80%E9%BA%BC%EF%BC%9F%E5%A6%82%E4%BD%95%E9%81%8B%E7%94%A8%EF%BC%9F/
	https://www.zhihu.com/question/34826522
	https://www.cloudflare.com/zh-cn/learning/dns/what-is-recursive-dns/
		a. 目的:
			I. 解析domain name(例如: google.com) 和IP之間的對應關係, 因為router只認IP, 所以需要DNS

		b. DNS的層級架構(由於全世界網址非常多, 沒辦法全部收集在一個中央機器裡, 需要把所有網址區分出不同"網路"domain"):
			I. 根網域(Root domain): 根網域是 DNS 架構最上層的伺服器，全球共約 16 台，當下層的任何一台 DNS 伺服器無法查出某個網址對應的 IP 位址時，則會向最上層負責根網域的 DNS 伺服器查詢
			II. 頂層網域（Top level domain）：使用國際標準組織（ISO）所制定的國碼（Country code）來區分頂層網域。例如：美國使用「us」、台灣使用「tw」、中國大陸使用「cn」、日本使用「jp」，由於美國是網際網路的創始國，所以通常可以不使用 us，全球的網域名稱是由「網際網路名稱與號碼分配組織（ICANN：Internet Corporation For Assigned Names and Numbers）」來管理（http://www.icann.org）。
			III. 第二層網域（Second level domain）：由使用單位向各國的網址註冊中心申請，台灣的網域名稱是由「台灣網路資訊中心（TWNIC：Taiwan Network Information Center）」來管理（http://www.twnic.net），使用單位繳交年費即可取得第二層網域的使用權。例如：教育單位台大使用 ntu.edu.、政大使用 nccu.edu.；政府單位台北市政府使用 taipei.gov、國科會使用 nsc.gov；營利單位 Google 使用 google.com、台積電（2330-TW）使用 tsmc.com、聯發科（2454-TW）使用 mediatek.com 等
			IV. 主機網域（Host domain）：由各使用單位之網管人員，依照實際需要自行細分成許多主機使用，每一台主機可以設定一個網域名稱，例如：台大的網頁使用 www、台大的選課系統使用 info、台大的郵件伺服器使用 mail 等。
			
		c. 紀錄:
			I. NS紀錄(Name server 紀錄): 
				🤔. NS 記錄指定了一個網域名稱的 DNS 伺服器。它告訴其他 DNS 伺服器哪個伺服器負責解析該網域的名稱。簡而言之，NS 記錄是網域名稱與其 DNS 伺服器之間的映射。(簡單來說就是記錄了哪個網域的地址, 要向哪個DNS server請求, 才能找到對應的IP)
			II. A 紀錄(Address Name 紀錄):
				🤔. 其實就是紀錄網址所對應的IP
			III. CNAME紀錄(Canonical Name 紀錄)
				🤔. 說穿了就是別名, 例如test.com指向IP=1.1.1.1, 而test.com的CNAME有testC1.com, testC2.com, testC3.com, 這三個CNAME都指向test.com. 他們三個本身不需要指向1.1.1.1, 只要指向test.com就好. 當你IP要改的時候, 別名自然也全部一起跟著變動

		d. Zone(區域)和Zone files, 和zone Transfer:  --->太麻煩了...參考chatgpt的問答吧...懶得再寫筆記了
		reference:
		http://dns-learning.twnic.net.tw/bind/intro6.html

			I. 定義: 通常表示在同一台dns server中紀錄某domain涵蓋的所有dns紀錄的統稱(包含NS, A CNAME等等), 這太抽象了, 我們直接看範例
			II. 範例: 通常root DNS server, 會有像是.com, .net, .org之類頂級domain name DNS server的IP紀錄(通常root DNS server只會紀錄這些NS, 而不會記錄任何A紀錄). 假設使用者如果對"www.example.com"做request, 附近的DNS server沒有該url的IP紀錄, 則會先去root去問, root DNS server不知道"www.example.com"所對應的IP, 但她知道記錄了xxxxx.com的對應IP的server的IP是多少, 他會回傳該IP給使用者, 使用者會在對此IP進行request, 也就是對example.com進行request. 
			III. 一個DNS可以維護多個zone:
				🤔. 例如: 一台DNS server 有以下兩個zone
					😄. example.com.zone = {
						NS紀錄--->ns1.example.com--->192.0.2.1
						NS紀錄--->ns2.example.com--->192.0.2.2
						A紀錄--->www.example.com--->192.0.2.3
						A紀錄--->mail.example.com--->192.0.2.4
					}

					😄. example2.com.zone = {
						NS紀錄--->ns1.example2.com--->198.51.100.1
						NS紀錄--->ns2.example2.com--->198.51.100.2
						A紀錄--->www.example2.com--->198.51.100.3
						A紀錄--->mail.example2.com--->198.51.100.4
					}

				🤔. 在例如: a.gtld-servers.net 是一个权威DNS服务器，它负责管理.com 和.net兩個zone
					😄. com.zone = {
						NS紀錄--->a.gtld-servers.net
						NS紀錄--->b.gtld-servers.net
						A紀錄--->example.com
					}

					😄. net.zone = {
						NS紀錄--->a.gtld-servers.net
						NS紀錄--->b.gtld-servers.net
						A紀錄--->example.net
					}
					
					
						


	B. DHCP(Dynamic host configuration protocol, 動態主機配置協議a.gtld-servers.net 是一个权威DNS服务器，它负责管理 .com 和 .net)  ---> 基於UDP
		a. IP 地址分配： DHCP 負責自動分配 IP 地址給網路上的客戶端設備。這使得管理員無需手動配置每個設備的 IP 地址，大大簡化了網路管理的工作。通常情况下，如果你在家中或小型辦公室等環境下設置網絡，路由器或無線路由器通常已經內建了DHCP伺服器功能。這表示你不需要額外安裝DHCP伺服器，因為路由器本身就扮演了這個角色。当你将三台电脑连接到路由器时，它们将会向路由器发送DHCP请求，并从路由器获取IP地址和其他网络配置信息。但如果你正在搭建一个更大的网络环境，比如企業网络，那么可能会有专门的DHCP服务器。在这种情况下，你可能需要设置和管理独立的DHCP服务器来为网络上的所有设备提供IP地址和其他配置信息。

		b. 租用時間： DHCP 分配的 IP 地址是有限期限的，稱為租用時間。在租用時間到期之前，客戶端需要定期向 DHCP 伺服器更新租用，以確保繼續使用分配的 IP 地址。

		c. 靜態分配： DHCP 還支持靜態 IP 地址分配，這意味著特定的 IP 地址可以保留給特定的設備，而不受動態分配的影響。這對於需要保持固定 IP 地址的設備（如伺服器）很有用。

		d. 範圍和池： DHCP 伺服器通常配置了一個 IP 地址範圍，稱為地址池。當客戶端需要 IP 地址時，DHCP 伺服器從這個地址池中分配可用的 IP 地址給客戶端。

		e. 中繼代理： DHCP 中繼代理是一個網路設備，負責轉發 DHCP 請求和回應，以幫助跨多個網路段的客戶端設備獲取 DHCP 配置信息。

		f. 安全性： DHCP 伺服器可以設置安全功能，如 MAC 地址過濾、IP 地址綁定等，以確保僅授權的設備可以獲取 DHCP 配置信息，從而防止未授權的設備入侵網路。
	
		g. 基本步驟: (口訣: 發提請確更(或dorar)
			I. 发现（Discover）： 客户端通过广播消息向网络中的所有DHCP服务器发送请求，以查找可用的DHCP服务器。

			II. 提供（Offer）： DHCP服务器收到客户端的发现消息后，会向其发送包含IP地址和其他配置信息的提供消息。

			III. 请求（Request）： 客户端在收到一个或多个提供消息后，会选择其中一个DHCP服务器，并向其发送请求消息，确认接受该服务器提供的IP地址和配置信息。

			IV. 确认（Acknowledge）： DHCP服务器在收到请求消息后，会向客户端发送确认消息，指示其可以使用提供的IP地址和配置信息。

			V. 更新（Renewal）： 在租约到期之前，客户端会定期向DHCP服务器发送更新请求，以续租租约。

		

	C. VolP(voice over IP) --->並非單一協議, 有以下協議組成
		a. RTP（Real-time Transport Protocol）：用於在網絡上傳輸語音和多媒體數據的協議。RTP確保了語音數據的即時性和同步性，使得通話品質更高。
		b. SIP（Session Initiation Protocol）：是一種用於建立、修改和終止VoIP通話的協議。SIP允許通話參與者之間的通信會話，並提供了許多功能，如呼叫轉移、多方通話、音訊和視訊通話等。
		c. H.323：是一組多媒體通信協議，用於視訊會議和語音通話。它定義了語音和視訊通信的標準，包括H.323協議和一系列相關標準，如H.225.0、H.245、H.450等。
		d. Codecs（編解碼器）：用於將語音信號轉換為數字信號的編解碼器。常用的編解碼器包括G.711、G.729等，它們可以壓縮和解壓縮語音數據，從而節省帶寬並提高語音品質。 

	D. Websocket
	E. LTE(long term evolution) --請看mobile筆記

	F. SNMP(simple network management protocol, 簡單網路管理協議)
		a. 用處:
			I. 是一種用於管理和監控網絡設備的協議
		
		b. 功能:
			I. 管理信息庫（MIB）：MIB是一個包含了管理信息的數據庫，它描述了網絡設備上可用的各種參數和屬性。通過MIB，管理器可以查詢設備的狀態、配置和性能指標。
			II. SNMP管理器(snmp manager)：SNMP管理器是一個用於監控和管理網絡設備的應用程序或系統。管理器可以向設備發送SNMP請求，從而獲取設備的信息或修改設備的配置。
			III. SNMP代理(snmp agent)：SNMP代理是安裝在網絡設備上的軟件或硬件組件，用於接收來自管理器的SNMP請求，並根據請求提供相應的響應。代理還可以將設備上的信息轉換成SNMP格式，並將其發送給管理器。
			IV. SNMP協議操作：SNMP定義了一組用於管理和監控設備的協議操作，包括Get、Set、GetNext、GetBulk等。這些操作可以通過SNMP協議與設備進行通信，從而實現設備的配置和監控。
			V. SNMP版本：SNMP有多個版本，包括SNMPv1、SNMPv2c和SNMPv3。這些版本在安全性、功能和效能方面有所不同，用戶可以根據自己的需求選擇適合的版本。
			VI. 安全性：SNMPv3引入了安全性功能，包括消息加密和身份驗證機制，以保護通信的機密性和完整性，防止未授權的訪問和攻擊。

		c. 大致模式如下:
			

			machine_A(安裝snmp manager)-- |------ machine_B(安裝snmp agent), 被管理
						      |------ machine_C(安裝snmp agent), 被管理
						      |------ machine_D(安裝snmp agent), 被管理

		d. 相關設備:
			I. SNMP主要用於管理網絡設備和伺服器等設施，包括路由器、交換機、網絡附加儲存（NAS）、伺服器等，以及一些嵌入式設備。這些設備通常運行著各種不同的作業系統，並且具有內置的SNMP代理程式，使得它們可以與SNMP管理系統通信，提供設備的監控和管理功能。

			II. 然而，一般個人電腦（PC）通常不會運行內置的SNMP代理程式，因此通常不包括在SNMP管理的範疇內。不過，在某些特定情況下，如果有需要，也可以在個人電腦上安裝SNMP代理程式，使其成為SNMP管理的對象

	G. NTP(Network Time Protocol, 網路時間協議)  ---> 基於UDP, 他是一個平常很少提到, 但實際上非常重要的一個協議, 用來控制網路通訊中不同主機之間如何確認彼此時間以及如何時間同步的一個協議, 同步時間指示同步System Clock, 並不會影響到real time clock(RTC), 所以理論上你重開機後, 時間人會回到沒有同步的狀態
	reference:
	https://ithelp.ithome.com.tw/articles/10325547
	https://www.jannet.hk/network-time-protocol-ntp-zh-hant/
		a. 為何要同步?
			I. 其實主機通訊, 同步本身不是主要目的, 主要目的是要確認"事件"發生的先後順序, 以及事件之間的時間間隔, 同步只是最方便的方式.  假設A, B兩台主機分別記錄A事件和B事件, 很多時候我們要知道哪件事情先發生且時間間隔為多久, 例如10台電腦同時參加一場網路拍賣交易, 10台主機分別輸入買入拍賣商品, 先買的人得標, 這時候就需要確認誰先誰後, 差了多久, 

		b. 機制
			I. 時間源選擇：NTP需要從一個可靠的時間源獲取時間信息。這些時間源可以是原子鐘、GPS衛星、其他時鐘服務器等。這些時間源通常被分類為不同的stratum（層次），stratum 0 是最精確的時間源，stratum 1 是直接與stratum 0連接的時間服務器，以此類推。時間源按照準確性和可靠性進行分類，通常使用層次（stratum）來表示。這些層次從stratum 0開始，數字越大表示離準確時間源的距離越遠，準確性也越低。 雖然stratum 0提供最高的精度，但在實際應用中直接讓所有設備都使用stratum 0並不可行。多層次時間源結構（stratum 1、stratum 2等）能夠有效地分散負載(不然stratum 0會爆掉)、提高系統的可靠性和擴展性，並且在成本效益上更具優勢。因此，NTP設計了一種層次化的時間同步架構，以確保系統在不同需求和環境下的高效運行。

				🤔. Stratum 0：

					😄. 描述：這些是直接從物理時鐘設備獲得的時間源，如原子鐘、GPS接收器、無線電鐘等。
					😄. 特點：非常精確，誤差通常在納秒級別。
					😄. 用途：作為最高精度的時間源，不直接連接網絡，但通過連接到stratum 1伺服器來提供時間。
				🤔. Stratum 1：

					😄. 描述：這些是直接從stratum 0時間源獲取時間的伺服器。
					😄. 特點：非常高的精度，誤差通常在微秒到毫秒級別。
					😄. 用途：提供給其他NTP伺服器或客戶端作為高精度時間源。

				🤔. Stratum 2及以上： ---> 我們大部分使用的NTP server都是stratum 2以上, 以達到資源分配和負載平衡的目的

					😄. 描述：這些是從更高層次（stratum 1或更高）伺服器獲取時間的伺服器。
					😄. 特點：精度逐漸降低，誤差可能在毫秒到秒級別。
					😄. 用途：繼續向下游伺服器和客戶端提供時間，同時校正自己的時間。

			II. 時間同步：NTP客戶端通過向NTP伺服器發送請求，獲取伺服器的當前時間。伺服器會將其時間信息回應給客戶端。客戶端根據收到的伺服器時間以及網絡往返延遲等信息，調整本地時鐘以使其與伺服器同步。

			III. 時鐘漂移調整：NTP不僅校正本地時鐘，還會不斷地監測本地時鐘和伺服器時鐘之間的差異，並且根據時鐘漂移（即時鐘不準確性的變化率）進行微調，以保持時鐘的準確性。

			IV. 時鐘穩定性：NTP會對從多個時間源獲取的時間信息進行統計分析，並且根據這些信息計算出本地時鐘的最佳估計值，從而提高時鐘的穩定性和準確性。

		c. 應用:
			I. 不僅限於網絡拍賣，許多分佈式系統，如金融交易、分佈式數據庫、協同工作系統等，都依賴於準確的時間同步來保證數據一致性和事件順序。


	H. UPnP(Universal Plug and Play, 通用即插即用, 是PnP概念在網路概念的擴展, 使用SSDP協議)  ----> 是一組協議組合，工作在應用層，旨在促進設備之間的自動發現和互操作性, 他也是一個你常常在用, 但沒有感覺到的一個協議
	reference:
	https://zh.wikipedia.org/zh-tw/UPnP
	UPnP與NAT經常一起使用: --->自動配置port號
	https://zhuanlan.zhihu.com/p/40407669
	SSDP DDOS:
	https://www.zhihu.com/column/p/27680875
		a. 

