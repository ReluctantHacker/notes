|#############################################################################################################|
1. IP 地址:
	A. 基本規則:
		a. 32位元(bit)組成, 或也可以說 4位元組(byte)
		b. 10進制表示
		c. 通常8位元(bit)一組
		d. 範例: 192.168.1.1
		e. 總數只有: 2^32 ~ 42億
		f. 他是根據"地區(或是組織)"劃分的地址, 不可重複
	B. 子網路(subnetwork):
		a. 子網遮罩(subnet mask):  ---> 她是CIDR概念的一部份
			I. 範例: 255.255.255.0, 轉成2進制: 11111111.11111111.11111111.00000000 ->代表前面24位為網路位
		b. CIDR(Classless Inter-Domain Routing):
			I. 範例: x.x.x.x/y, y表示網路位的位數

		c. 範例(重要):
			I. 192.168.4.0/24, 是否代表IP範圍從192.168.4.1~192.168.4.254, 如果是的話, 那192.168.4.0和192.168.4.255是做甚麼用的?
				🤔. IP範圍確實從192.168.4.1到192.168.4.254，但192.168.4.0和192.168.4.255具有特殊用途：
					😄. 192.168.4.0 是指這個子網的網路地址或網路ID。它用於識別整個子網。
					😄. 192.168.4.255 是廣播地址，用於向同一個子網內的所有主機發送消息。通常用於將消息發送給該子網內的所有設備。

		d. 分類網路(classful addressing) --->由於分配不均, 已經被CIDR取代
			I. A類地址, 網路位8位(規定有2^7個A類網路), 剩餘位數24(也就是一個A類網路可以有2^24主機數) 
				🤔. 關於網路數量的解釋:
					😄. 雖然網路位站8位, 但是!!! 不代表A類網路是2^8個, 千萬不要誤會! 你想想喔~如果A類網路是2^8個, 那所有網路都是A類網路了!! 因為她涵蓋了IPv4的所有範圍了!!!  當初設計網路可沒那麼笨, 所以故意設計讓A類網路只有2^7個, 那剩餘2^7*2^24在繼續分給B, C類網路! 也就是說我們可以歸類以下結果:
						😄. 所有A類網路總共拿到所有可用IP數量為: 2^31 (全部的一半)
							😄. 0.0.0.0 ~ 127.255.255.255
						😄. 所有B類網路總共拿到所有可用IP數量為: 2^30 (全部的一半的一半)
							😄. 128.0.0.0 ~ 191.255.255.255		
						😄. 所有C類網路總共拿到所有可用IP數量為: 2^29 (全部的一半的一半的一半)
							😄. 192.0.0.0 ~ 223.255.255.255
						😄. A, B, C都分完後還剩下2^32 - 2^30 - 2^29個可用IP
			II. B類地址, 網路位16位(規定有2^14個B類網路), 剩餘位數16(也就是一個B類網路可以有2^16主機數)
			III. C類地址, 網路位24位(規定有2^21個C類網路), 剩餘位數8(也就是一個C類網路有2^8主機數)

		e. IPv4 私有地址范围：
			I. Class A：10.0.0.0 到 10.255.255.255（10.0.0.0/8）
			II. Class B：172.16.0.0 到 172.31.255.255（172.16.0.0/12）
			III. Class C：192.168.0.0 到 192.168.255.255（192.168.0.0/16）

			


	B. NAT(Network Address Translation):
		a. basic NAT
			I. 靜態NAT
				🤔. 方法:
					😄. 一個內網IP對應一個外往IP
				🤔. 缺點:
					😄. 手動維護內外網IP mapping, 很麻煩
					😄. 萬一有個IP對應一直沒有使用便浪費了
			II. 動態NAT
				🤔. 方法:
					😄. 一個內網IP對應一個外往IP, 但動態調整
				😄. 優點:
					😄. 較方便, 較不浪費
				🤔. 缺點:
					😄. IPv4不夠用, 問題沒解決

		b. NAPT(Network Address port Translation): ----> 現代多採用此法
			I. 方法:
				🤔. router的一個port對應一個內網IP, 他會維護類似以下的mapping
					______________________________________________
					|內網IP	             |   外網IP              |
					|192.168.1.55:5566---|--219.152.168.222:9200 |
					|192.168.1.59:80-----|--219.152.168.222:9201 |
					|192.168.1.59:4465---|--219.152.168.222:9202 |
					|____________________|_______________________|

			II. 優點:		
				🤔. 真正解決了IPv4不足的問題


		c. 主要功能:
			I. IP地址轉換: NAT将内部私有网络的IP地址转换为公共IP地址，以便在公共网络上进行通信。这样，局域网内的多个设备可以共享同一个公共IP地址来访问互联网。
			II. 端口轉換: 除了将IP地址转换为公共地址外，NAT还会对通信的端口号进行转换。这样在一个公共IP地址上的多个内部设备可以通过不同的端口号来建立多个连接 
			III. 網路隔離: NAT实际上创建了一个隔离的网络环境，使得局域网内的设备对外部网络是隐藏的，增强了网络的安全性

		d. 實現:
			I. NAT通常在路由器(其實就是我們常說的網路分享器)或防火墙上实现

		e. 重要應用:
			I. 解決了IPv4地址不夠的問題(NAPT)


|#############################################################################################################|
2. IP 封包(packet), 以下是組成, 照順序
	A. header:
		a. Version  
			I. 功能: 標識 IP 協議版本，IPv4 封包中這個字段的值是 4, IPv6則為6。
			II. 長度: 4 bit
		b. Header Length(IHL頭部長度)
			I. 功能: 標示header占用多少空間
			II. 長度: 4 bit
		c. Type of Service(TOS, 服務類型) 
			I. 功能: 指定封包的優先級和服務質量 (QoS)，可以包括區分服務和擁塞通知等。
			II. 長度: 1 Byte
		d. Total Length(總長度)： 
			I. 功能: 封包總長度(頭部+數據), 最大值是2^16=65535
			II. 長度: 2 Byte
		e. Identification(標籤):  ---> 與分片(fragmentation)有關
			I. 用於將分片的封包重新組裝
			II. 長度: 2 Byte 
		f. Flags(標籤)  ---> 與分片(fragmentation)有關
			I. 功能: 控制和標識封包的分片，包括未來使用 (Reserved)、不分片 (DF) 和更多分片 (MF)。
			II. 長度: 3 bit
		g. Fragment Offset:  ---> 與分片(fragmentation)有關
			I. 功能: 指示分片相對於原始封包的偏移量，單位是 8 字節。
			II. 長度: 13 bit
		h. Time to live(TTL, 生存時間)
			I. 功能：限制封包在網絡中的存活時間，每經過一個路由器減少 1，到達 0 時封包被丟棄。
			II. 長度：1 byte 
		i. Protocol:
			I. 功能: 指出封包中數據部分所使用的協議，例如 TCP (6) 或 UDP (17)。
			II. 長度：1 byte
		j. Header Checksum (頭部校驗和)：
			I. 功能：用於檢查頭部的完整性和錯誤。
			II. 長度：2 byte

		c. source IP address:
			I. 4 byte
		c. destination IP address
			I. 4 byte

	B. data: 包含其他層的內容

	C. fragmentation
		a. 定義: 通常其他上層的協議(例如TCP, UDP, 不管...)會把大的數據分割成小的, 但是有可能在某些情況下, 分割出來的大小仍舊比IP層規定的還要大(例如ethernet規定, MTU是1500 bytes), 這個時候就要由IP協議進行分割
		b. fragmentation數據傳輸時候需要使用到的head:
			I. Identification (標識)：所有分片的這個字段值相同，用來標識它們是屬於同一個原始 IP 封包。
			II. Flags (標誌)：其中的一位標誌（More Fragments, MF）指示是否有更多的分片。如果是最後一個分片，這位會被設置為 0。
			III. Fragment Offset (分片偏移)：指示該分片在原始封包中的位置，單位是 8 字節。
		c. 實際可能的範例,  假設一個原始 IP 封包的總長度是 4000 字節，而網絡的 MTU 是 1500 字節，這意味著需要分成幾個分片來傳輸：
			I. 第一個分片：
				🤔. IP 頭部（20 字節）
				🤔. 數據部分（1480 字節）
				🤔. Fragment Offset = 0
				🤔. More Fragments (MF) = 1
			II. 第二個分片：
				🤔. IP 頭部（20 字節）
				🤔. 數據部分（1480 字節）
				🤔. Fragment Offset = 1480 / 8 = 185
				🤔. More Fragments (MF) = 1
			III. 第三個分片：
				🤔. IP 頭部（20 字節）
				🤔. 數據部分（1040 字節）
				🤔. Fragment Offset = 2960 / 8 = 370
				🤔. More Fragments (MF) = 0
			IV. 當這些分片到達接收端時，接收端的 IP 層會根據Identification, Fragment Offsets, More Fragments標頭, 將封包重新組合. 重組過程中，接收端會將數據部分按正確的偏移量拼接起來，直到所有分片都到達並重組為完整的原始封包。  需要注意的是, IP並在乎封包的"順序"(那是TCP在管的), 所以雖然fragmentation把分片的順序考量到了, 但那只針對分片, 與其他常態的封包沒有關係, 不要誤會


|#############################################################################################################|
3. 路由(routing)
	A. ARP(Address resolution protocol)
		a. 網路卡只認識MAC不認識IP, 你傳IP她看不懂
		b. 從IP找對應的MAC
		c. 每一台電腦都維護自己的ARP表
		d. ARP表中沒有對應IP MAC對, 則廣播尋找
		e. ARP攻擊
			I. 需求者廣播循址
			II. 攻擊者收到後, 連續發出假的回應(一般不會回應)
			III. 是一種LAN的攻擊手段, 通常攻擊者會假裝自己是gateway(因為需求通常都通向gateway)
	
	B. 所謂路由其實就是目的地址:X.X.X.X, 那我當下要去哪裡可以連到, 有可能是b.b.b.b		

	C. 路由器(router)
		a. 路由器的定義
			I. node ----- a device that implements IPv6(or IPv4)
			II. router ----- a node that forwards IPv6(or IPv4) packets not explicitly addressed to itself.
			III. host ----- any node that is not a router
		
		b. 一台路由器可能會連接很多不同的子網路, 再不同的子網路裡該路由器都會有一個屬於自己的IP, 所以一台路由器可能會有很多IP(注意! 這個本來就是可能的, 只有MAC地址才是只能有一個, 除非你有兩張網路卡)

		c. 功能分類  (switch也有同樣的功能分類)
			I. 數據平面（Data Plane） --->主要負責根據路由表轉發數據, 或根據政策接收過濾數據
				🤔. **數據平面（Data Plane）**是路由器中的一個功能區域，負責實際數據包的處理和轉發。其主要功能包括：
					😄. 數據包轉發：根據路由表或轉發信息基礎結構（FIB，Forwarding Information Base），將接收到的數據包快速轉發到正確的出口接口。
					😄. 流量過濾：應用防火牆規則或ACL（Access Control List，訪問控制列表）過濾流量。
					😄. NAT：進行網絡地址轉換，將內部地址轉換為外部地址。
					😄. 封裝與解封裝：根據不同的鏈路層協議，對數據包進行封裝和解封裝。
					😄. 數據平面操作通常由專用硬件（如ASIC，應用專用集成電路）加速，以實現高效的數據包處理。

			II.  控制平面（Control Plane） --->主要負責計算路由表
				🤔. **控制平面（Control Plane）**是路由器中的另一個功能區域，負責網絡控制和管理。其主要功能包括：
					😄. 路由協議運行：運行動態路由協議（如OSPF、BGP、EIGRP等），與其他路由器交換路由信息，建立和維護路由表。
					😄. 網絡管理：處理SNMP（簡單網絡管理協議）請求，提供CLI（命令行界面）以便網管員配置路由器。
					😄. 路徑計算：根據路由協議計算最佳路徑，將這些路徑信息下發到數據平面。
					😄. 鏈路狀態監控：監控鏈路狀態，根據需要調整路由。
					😄. 控制平面通常運行在路由器的主CPU上，負責複雜的邏輯和決策操作。

			III. 例子：數據包轉發的過程
				🤔. 當一個數據包進入路由器時，兩個平面的協作過程如下：
					數據包進入路由器：

					數據包通過網絡接口進入路由器。
					數據平面處理：

					數據平面查詢轉發信息基礎結構（FIB）或路由表，根據匹配的路由條目決定數據包的下一跳。
					如果有需要，數據平面應用ACL進行流量過濾，或者進行NAT操作。
					數據平面將數據包轉發到正確的出口接口。
					控制平面運行路由協議：

					控制平面運行路由協議，從其他路由器學習新的路由信息。
					控制平面計算最佳路由，更新路由表，並將更新的路由信息下發到數據平面（更新FIB）。
		d. SDN(Software Defined Network)
			I. 基本原理:
				🤔. 一個網路內, switches 和 routers物理拓撲位置不動, 把他們的control plane功能抽取出來統一由controller(一台中央主機, 由於controller可以再虛擬機上執行, 所以不須使用特殊硬體)處理後, 再把路由表及需要用到的表之運算結果回傳給switches和routers, 這樣你就不需要管routers或是switches是哪家廠商提供的以及他的規格和設定如何處理, 大大節省維護成本, 且提升了靈活性、可管理性和可編程性, 可擴展性
				🤔. SDN通常除了data planes何controllers以外, 還會有application layer, 可以與controller同在一台主機, 也可以按照需求分開部屬. Application基本就是按照特定的設計, 程序化的控制controller, 來讓controller把按照特殊需求的路由計算結果返回data plane, 
				🤔. 結合data plane, controller, application layer協同合作的一個例子:
					這個實例將是一個視頻流量優化應用，用於確保視頻流的高質量傳輸，避免卡頓和延遲。

					😄. 背景
						😄. 公司A有一個內部網絡，裡面有多個部門，員工經常需要訪問公司內部的視頻服務器來觀看培訓視頻。公司希望確保視頻流量的高質量傳輸，特別是在高峰時段。

					😄. 參與的組件
						😄. 應用層（Application Layer）：
							😄. 視頻流量優化應用（Video Traffic Optimization App）
						😄. 控制平面（Control Plane）：
							😄. SDN控制器（如OpenDaylight、ONOS）
						😄. 數據平面（Data Plane）：
							😄. 交換機和路由器（支持OpenFlow協議）
					😄. 運作流程
						😄. 應用層發送策略要求
							😄. 視頻流量優化應用監測到網絡中的視頻流量增加，可能導致高峰時段的視頻傳輸質量下降。
							😄. 應用計算出需要優先處理視頻流量的策略，以確保視頻流的帶寬和低延遲。
							😄. 應用層通過北向接口向SDN控制器發送優先處理視頻流量的策略要求。
						😄. 控制平面處理策略要求
							😄. SDN控制器接收到來自應用層的策略要求。
							😄. 控制器分析當前網絡狀態，決定如何實施這一策略。例如，控制器可能會決定為視頻流量配置專用的高優先級路由，並保留足夠的帶寬。
							😄. 控制器計算出具體的流表規則，以實現這一策略。這些規則將確保視頻流量在網絡中的轉發優先級高於其他流量。
						😄. 控制平面下發規則
							😄. 控制器通過南向接口（如OpenFlow）將這些流表規則下發到相關的交換機和路由器。
							😄. 這些規則可能包括：
								😄. 匹配視頻流量的特徵（如特定的IP地址和端口號）。
								😄. 為匹配的視頻流量設置高優先級隊列。
								😄. 在交換機和路由器之間配置專用路徑，確保低延遲和高帶寬。
						😄. 數據平面執行控制
							😄. 交換機和路由器接收到來自控制器的流表規則後，開始按照這些規則轉發數據包。
							😄. 當員工請求觀看視頻時，視頻流量會被識別並分配到高優先級隊列，確保其在網絡中的快速傳輸。
							😄. 視頻流量在網絡中的轉發路徑經過優化，避免擁堵點，確保流暢的視頻播放體驗。
					😄. 數據流動和轉發過程
						😄. 用戶請求視頻：
							😄. 一個員工在電腦上打開視頻應用，請求觀看一個培訓視頻。這個請求被封裝成TCP/IP數據包，並通過本地網絡發送到交換機。
						😄. 識別視頻流量：

							😄. 交換機根據流表規則識別出這是視頻流量（基於源IP、目的IP和端口號）。
							😄. 交換機將視頻流量標記為高優先級，並將其轉發到下一個網絡節點（路由器）。
						😄. 高優先級轉發：
							😄. 路由器根據接收到的流表規則，繼續優先處理這些視頻流量，確保其在網絡中快速轉發，避開可能的擁堵點。
						😄. 到達視頻服務器：
							😄. 最終，視頻流量到達公司內部的視頻服務器，服務器開始向員工的電腦發送視頻數據。
						😄. 持續優化：
							😄. 如果網絡狀態發生變化（例如，更多用戶開始觀看視頻，導致新的擁堵），應用層可以動態調整策略要求，控制器重新計算並下發新的流表規則，確保視頻流量的質量。
								

	C. 路由表(routing table), 裡面有三種協議的路由

		若是忘記原理的話, 看以下的影片, 會秒懂:
			https://www.youtube.com/watch?v=AzXys5kxpAM

		a. 直連路由(direct)
			I. router與destination同一個子網路!
			III. 你不需要手動設定, 因為同一個網路, 直接就可以知道

		b. 靜態路由(static)
			I. 非direct的狀況, 你可以手動設定下一跳的IP, 只要該IP與你共處同一子網路
			II. 需人工手動維護
		
		c. 動態路由(dynamic), 若是非direct, 又嫌static太麻煩, 可以選擇設定以下協議: --->這些協議都是第三層協議, 與IP協議同時協力工作
			I. 內部網關協議(Interior Gateway Protocol, IGP)
				🤔. RIP(Routing Information Protocol)
					😄. 使用情況:
						😊. 使用較小的網路,  由於速度較慢, 漸漸被OSPF取代, 有明顯缺點如下:
							😊. 收敛慢
							😊. 易产生路由环路
							😊. 可扩展性差，最大只能支持15跳
							
					😄. 採用距離向量算法(distance-vector routing, DV routing)
						😄. Bellman-Ford Algorithm(是一種dynamic programming, 計算較慢, 但準)
							😊. 詳細算法參考以下:
							https://www.youtube.com/watch?v=hdpnoOcrGck
							https://my.eng.utah.edu/~cs5480/notes/chapter4-2007-Part2.pdf

					😄. DV routing有機會發生Looping 異常, 原理如下:
						A, B, C三台路由器, 形成三角互聯
						A想發packet給C, 根據A的路由表顯示, B可以到達C. 於是A把packet發給B, B接收packet後, 查詢自己的路由表, 發現到C的最優路徑是A, 於是又把packet發給A, 來來往往, 變成loop. 會發生這樣的原因, 有可能來自C 壞掉了, 但是壞掉的通知傳送的慢, 因為A需要透過B才能到達C(可見C到A的距離是比到B還更遠), 所以B會先收到C壞掉了, B-C距離改成infinity, 路由變成B要到C需要經過A, 然後就形成loop了.
						😄. 解法1: 水平分離切口(Split Horizon Hack)
						😄. 解法2: 暫停(Hold Down)
				
				🤔. ISIS(Intermediate System to Intermediate System)
					😄. 使用狀況:
						😄. 適用於中等網路, 靈活度和可擴展性都很不錯

					😄. 链路状态算法
						😄. Dijsktra Algorithm (是一種greedy approach, 計算較快, 但沒那麼準)
							😊. 詳細算法參考以下:
							https://www.freecodecamp.org/chinese/news/dijkstras-shortest-path-algorithm-visual-introduction/
							https://zhuanlan.zhihu.com/p/129373740

				🤔. OSPF(Open Shortest Path First)
					😄. 使用狀況:
						😄. 適用較大的網路, 使用情形非常活耀, 很受歡迎
					😄. 链路状态算法
						😄. Dijsktra算法 (是一種greedy approach, 計算較快, 但沒那麼準)

			I. 邊界網關協議(Border Gateway Protocol, BGP)
				🤔. BGP(Border Gateway Protocol)
					😄. 使用狀況:
						😄. 適用超大的網路, 
							😊. 互联网路由(為全球互聯網提供重要的作用)
							😊. 跨国公司网络
							😊. 多地域的云服务提供商
							😊. 网络架构中的边界控制
					😄. 採用路徑向量算法(path-vector routing, PV routing)
					😄. 重要性質:
						😄. 大多数ISP必须使用BGP来与其他ISP建立路由连接
						😄.即使大多数互联网用户不直接使用它，但是与7号信令系统——即通过PSTN的跨供应商核心响应设置协议相比，BGP仍然是互联网最重要的协议之一
						😄. 特大型的私有IP网络也可以使用BGP
						😄. 例如，当需要将若干个大型的OSPF（开放最短路径优先）网络进行合并，而OSPF本身又无法提供这种可扩展性时
						😄. 使用BGP的另一个原因是其能为多宿主的单个或多个ISP（RFC 1998）网络提供更好的冗余

				
|#############################################################################################################|
4. 路由(routing), 廣域範圍
	A. 自治系統(Autonomous System)
		a. 用通俗的语言来形容，就是一个互联网的独立王国，
		b. 这一个个独立王国互联起来，就组成了互联网(Internet)
		c. 每个王国有自己独立的国号，以区别于别的王国，这个国号用自治系统号ASN(Autonomous System Number)
		d. ASN 由两个字节组成，理论上取值范围为 1- 65535，末尾的1024个ASN是私有自治号, 用于王国内部的下属郡国使用，不能外泄(类似私有IP，如果不小心外泄，别人也会忽略)

	B. 自治系統(Autonomous System)之間如何互聯
		a. 透過BGP協議, 交換各自的IP路由表
		b. 透過AS 各自的邊界路由器(border router), 也就是连接两个或多个自治系统（AS）之间的边界的路由器。它位于网络的边缘，负责连接不同自治系统之间的网络
		c. ASN就是BGP协议用来辨识邻国的一个身份证，同时在交换的路由表信息里，会附上各自的AS号

	C. 網際網路服務供應商(ISP, Internet Service Provider)
		a. 通常會有自己的ASN(一些大型的公司如Google, Apple也會有)
		b. 為一般企業及私人網際網路瀏覽所提供的上網服務
			I. 整合服務數位網路(ISDN)
			II. DSL(ADSL)
			III. 纜線數據機
			IV. 專線(Leased Line)
			V. 電力線通訊(Power Line Communication，簡稱PLC)
			VII. WiMAX
		c. 網際網路代管服務
			I. 主機代管(Colocation、IDC)
			II. 電子郵件(E-Mail)
			III. 網頁代管(web hosting)
			IV. 域名系統(DNS)
			V. 代理伺服器(Proxy)
			VI. 新聞群組(Newsgroup)
			VII. 雲端運算
