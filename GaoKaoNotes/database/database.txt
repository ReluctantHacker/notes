|#############################################################################################################|
1. 資料庫的基本類型:
	A. 階層式
		a. 樹結構
		b. 例如: file system
	B. 網狀式
		b. 網狀結構, node之間可以互聯
	C. 關聯式
		c. sql類型, 也是最廣泛使用的
	D. 物件導向式
		d. 使用程式語言中class的概念來儲存數據

|#############################################################################################################|
2. 資料庫的架構
	A. 單機
	B. 終端
	C. 主從(client-server)
		a. 就是一般常見的架構
	D. 分散式(distributed database)
		a. 由多台數據庫server組合而成, 
		b. 使用者在存取資料時, 資料可以來自於不同的伺服器中
		c. 效率較好, server負擔較小, 但也較難建立
		d. 透明度:
			I. 在分散式系統中，透明度（Transparency）指的是系統對用戶或應用程序隱藏了其內部的細節，使其感覺就像是在使用單一的、統一的系統。透明度旨在簡化系統的使用和管理，使得用戶和應用程序可以將注意力集中在功能和應用上，而不必關心底層的實現細節。透明度通常包括以下幾個方面：

				🤔. 存取透明度（Access Transparency）：
					😄. 使用者無需關心資料的存儲位置和具體的存取方式，只需通過統一的接口來訪問資料。
				🤔. 位置透明度（Location Transparency）：
					😄. 使用者不需要知道資料或服務的實際位置，可以通過統一的命名來訪問它們。即使資料或服務的位置發生變化，使用者也不會受到影響。
				🤔. 移動透明度（Mobility Transparency）：
					😄. 使用者可以在系統中自由地移動，而不會影響其訪問資料或服務的能力。系統能夠自動地處理資源的移動和重新配置，而不需要用戶干預。
				🤔. 重定向透明度（Redirection Transparency）：
					😄. 系統可以根據負載情況和資源可用性，自動地將請求重定向到最合適的資源或服務上，用戶不需要手動干預。
				🤔. 故障透明度（Failure Transparency）：
					😄. 系統可以自動地處理故障和錯誤，並提供恢復機制，使得用戶無需感知到系統的故障或錯誤。

	E. 關於分散式系統distributed system和cluster system的區別
		a. Cluster System  ----> 所有主機都擁有完整的系統, 他們之間同時處裡一件事情, 達到速度上更快的效果
			I. Cluster System（集群系统） 是由多个相互连接的计算机（节点）组成的系统，这些节点作为一个单一的统一系统进行协同工作。集群系统通常用于"""提高系统的性能、可用性和容错能力"""。其特点包括：

				🤔. 共享存储：集群系统中的节点通常共享存储设备，所有节点可以访问相同的数据。
				🤔. 紧密耦合：节点之间的通信通常通过高速网络（如千兆以太网或InfiniBand）进行，通信延迟较低。
				🤔. 集中管理：集群系统通常由一个集中管理的调度系统或集群管理软件进行协调。
				🤔. 应用场景：高性能计算（HPC）, super computer(超級電腦)、数据库集群、Web服务器集群等。

		b. Distributed System  ----> 把系統的組件分布到不同的主機中
			I. Distributed System（分布式系统） 是由多个相互独立的计算机组成的系统，这些计算机通过网络协同工作，但每个计算机都是一个独立的实体。"""分布式系统旨在提供扩展性、容错性和地理分布能力"""。其特点包括：

				🤔. 独立节点：分布式系统中的每个节点都是独立的，可以有自己的存储和计算资源。
				🤔. 松散耦合：节点之间通过广域网（如互联网）进行通信，通信延迟较高且不稳定。
				🤔. 去中心化管理：分布式系统通常没有单一的集中管理实体，各节点自主协作。
				🤔. 应用场景：分布式文件系统（如Google File System）、分布式数据库（如Cassandra、DynamoDB）、内容分发网络（CDN）等。 其實你熟悉的網頁開發, 也是分散式系統的一個實例, 後端與前端, 不同的組件分布在不同主機中, 彼此告內聚, 低耦合(不互相依賴, 各自作業)
		c. 主要区别
			I. 耦合程度：
				🤔. Cluster System：紧密耦合，节点之间的通信延迟低，通常使用高速网络。
				🤔. Distributed System：松散耦合，节点之间的通信延迟高，通常使用广域网。
			II. 管理方式：
				🤔. Cluster System：集中管理，由一个集群管理系统进行协调。
				🤔. Distributed System：去中心化管理，各节点自主协作。
			III. 存储方式：
				🤔. Cluster System：通常使用共享存储，所有节点访问相同的数据。
				🤔. Distributed System：各节点有自己的存储，数据分布在多个节点上。
			IV. 应用场景：
				🤔. Cluster System：适用于需要高性能计算、低延迟通信的应用，如HPC、数据库集群。
				🤔. Distributed System：适用于需要扩展性、地理分布和容错能力的应用，如分布式数据库、分布式文件系统。
			V. 容错机制：
				🤔. Cluster System：通过冗余和故障转移机制实现高可用性。
				🤔. Distributed System：通过数据复制、分片和一致性协议（如Paxos、Raft）实现容错和高可用性。
		d. 举例说明
			I. Cluster System 示例：
				🤔. Hadoop YARN Cluster：用于分布式数据处理，但本质上是一个集群系统，因为它的节点紧密耦合并集中管理。
				🤔. Oracle RAC（Real Application Clusters）：一个高可用性和高性能的数据库集群系统。
			II. Distributed System 示例：
				🤔. Google File System（GFS）：一种分布式文件系统，数据分布在多个节点上。
				🤔. Apache Kafka：一个分布式消息系统，节点之间通过网络通信，各节点独立工作。
		e. 总结:
			I. 尽管 Cluster System 和 Distributed System 都涉及多计算机协作，但它们在耦合程度、管理方式、存储方式和应用场景上有显著不同。理解这些差异有助于在设计和选择系统架构时做出正确的决策。總結如下:

				🤔. Cluster System（集群系统）
					😄. 高耦合：节点之间通过高速网络紧密连接，通常使用专用硬件和软件来确保节点间的快速通信和协调。
					😄. 协同工作：节点需要协同工作才能实现系统的整体功能。如果某个节点出现故障，其他节点通常可以接管其任务，但需要依赖集群管理软件的协调。
					😄. 共享资源：节点通常共享存储和其他资源，所有节点可以访问相同的数据存储设备。
					😄. 不能独立运作：单个节点通常不能独立完成整个系统的工作，必须依赖集群中的其他节点。
				🤔. Distributed System（分布式系统）
					😄. 低耦合：节点之间通过广域网（如互联网）连接，节点之间的通信延迟较高且不稳定。每个节点可以是地理上分散的，甚至位于不同的国家或地区。
					😄. 独立运作：每个节点都是一个独立的实体，可以自主完成其分配的任务，即使其他节点出现故障，它们仍然能够继续运作。
					😄. 独立资源：每个节点有自己的存储和计算资源，数据分布在多个节点上，各节点可以独立管理和存储自己的数据。
					😄. 去中心化管理：分布式系统通常没有单一的集中管理实体，各节点通过一致性协议（如Paxos、Raft）进行协调和数据一致性。
				🤔. 再次总结
					😄. Cluster System 强调高性能、低延迟和节点间的紧密协作，适用于高性能计算和需要快速响应的应用场景。
					😄. Distributed System 强调扩展性、容错性和地理分布，适用于大规模、容错性高和地理分布广泛的应用场景。
					😄. 分布式系統是把系統分散到各個主機中, 然而cluster系統是讓所有主機都擁有完整的系統, 他們之間同時處裡一件事情, 可以達到增加處理此事情的效果?? 是否可以想像成分布式系統是一間公司, 把該公司分成好幾個不同功能的部門, 而cluster系統則是把好幾間具有相同功能的小公司合再一起處理相同的工作

	F. Cluster database VS distibuted database:   ---> cluster database和cluster index沒有關係! 別搞混
		a. Database Cluster
			I. Database Cluster 是由多个数据库服务器（节点）组成的系统，这些服务器共同工作以提高数据库的性能、可用性和容错能力。数据库集群通常有以下特点：

				🤔. 高可用性：通过冗余和故障转移机制，确保即使一个节点故障，系统仍能继续运行。
				🤔. 负载均衡：将数据库查询和写入请求分配到多个节点上，分散负载，提升整体性能。
				🤔. 数据一致性：通过同步或异步复制机制，确保所有节点上的数据保持一致。
				🤔. 常见应用：OLTP（在线事务处理）系统，要求高可用性和高吞吐量的系统。
		b. 分散式数据库（Distributed Database）
			I. 分散式数据库 是指将数据库的数据分布在多个地理位置不同的服务器或数据中心上，以实现数据的分散存储和处理。分散式数据库的主要特点包括：

				🤔. 数据分片：数据被划分成多个片段（分片），每个分片存储在不同的服务器上，以实现水平扩展（scalability）。
				🤔. 地理分布：数据分布在不同的地理位置，以减少延迟，提高访问速度，或者遵守数据主权法规。
				🤔. 数据复制：为了提高数据可用性和容错能力，分散式数据库通常会将数据复制到多个节点。
				🤔. 常见应用：OLAP（在线分析处理）系统，大数据处理，跨地域的应用程序。



|#############################################################################################################|
3. 資料庫設計基本流程
	A. 需求分析
		a. 收集和分析用戶需求。
		b. 確定數據的類型、範圍和大小。
		c. 定義數據的完整性、一致性和安全性需求。
	B. 概念設計
		a. 創建實體-關係圖（ERD）。
		b. 確定實體、屬性和關係之間的約束。
		c. 設計數據的規範化和非規範化。
	C. 邏輯模型
		a. 創建關係模式。
		b. 定義主鍵、外鍵和索引。
		c. 設計數據的完整性約束。
	D. 物理模型
		a. 選擇數據庫管理系統（例如MySQL、Oracle等）。
		b. 創建表格、視圖和索引。
		c. 設計數據的存儲和查詢策略。
	E. 實施測試
		a. 導入數據。
		b. 執行功能測試和性能測試。
		c. 確保數據的一致性和安全性。

|#############################################################################################################|
3. ER Model(ER digram)
reference:
關於圖形代號的完整說明如下參考:
https://www.conceptdraw.com/examples/erd-double-line
弱實體的連接, "完全參與", "部分參與":
https://faculty.stust.edu.tw/~jehuang/oracle/ch2/2-1.htm
一個討論:
https://stackoverflow.com/questions/19781294/whats-the-difference-in-notation-for-total-participation-and-recursive-relation

	A. Chen's notation (以下整理比較容易忘記或混淆的一些概念)
		a. 弱實體(weak entity)
			I. 所謂弱實體就是必須依賴於其他實體而存在, 例如在學生資料庫中"學生家長"實體依賴於"學生"實體, A學生若從資料庫清除了, A學生的家長自然也就不存在
			II. 使用雙矩形(外面加邊框)表示
		b. 弱關係: 實體和弱實體之間關係用雙菱形(外面加邊框)表示(一班的只用普通菱形)

		c. "推導屬性"即是可從其他屬性推導出來, 例如星座可從出生日期推導.  推導屬性用"虛線橢圓"表示

		d. "多值屬性" 即是擁有很多值得屬性, 例如專長屬性, 可以有好幾種專長, 多值屬性用"雙橢圓(加邊框)"表示

		e. "total participation", "partial participation"
		reference:
		https://faculty.stust.edu.tw/~jehuang/oracle/ch2/2-1.htm
			I. 我們知道, A, B兩個entities 之間有一個"關係"R, 若A裡面的instance必定完全參加R則 稱A完全參與R(total participation), 用"double line"表示, 若instance不需要完全參加R則表示部分參加(partial participation), 用single line表示, B也是一樣的
			II. 弱實體(weak entity)C必定依附於一個實體D, 他們之間的關係R, C必定完全參加R(但是D不見得完全參加R), 所以weak entity在ER圖中, 至少有一條double line, 且此double line指向的關係必定是依附於他的"母親"entity

	B. Crow's foot

	C. ERD設計的三個原則, 就是...
		a. 找出並條列出所有entity
		b. 找出並條列出所有實體對應的所有attributes
		c. 找出所有entity之間的關聯, 並條列出來
		d. 按照條列劃出ERD

	D. 實際設計範例題目:
		https://medium.com/pierceshih/%E7%AD%86%E8%A8%98-%E5%AF%A6%E9%AB%94%E9%97%9C%E8%81%AF%E5%9C%96-87c3ecbc5ff0
		https://www.mis.nsysu.edu.tw/db-book/pro_ch3.html

	E. EER model(enhance ER model)
	reference:
	http://uml.org.cn/sjjm/Chapter10-4.pdf


|#############################################################################################################|
4. 資料庫設計
	A. 正規化(normalization)
	reference:
	https://stackoverflow.com/questions/723998/what-are-database-normal-forms-and-can-you-give-examples/724032#724032
		a. 第一正規化: 把可以拆分的欄位拆出, 且不能有重複的資料(一樣)的資料, 也就是需要有primary key
			I. Every non-key attribute should be dependent on the key
		b. 第二正規化: 部分相依於primary keys的欄位必須獨立出去
			I. Every non-key attribute should be dependent on the key and the whole key
		c. 第三正規化: 欄位本身不相依於primary keys, 但她所相依的欄位卻完全相依於primary keys, 這樣的欄位也要獨立出去
			I. Every non-key attribute should be dependent on the key, the whole key and nothing but the key
		d. BCNF ---> Every attribute(including non-key or key attribute) should be dependent on the key, the whole key and nothing but the key
		reference:
		以下的解釋有一個精采的範例
		https://www.youtube.com/watch?v=VWnKUKH4tLg
		另一個解釋, 但不是很好(範例有問題!)
		https://stackoverflow.com/questions/8437957/difference-between-3nf-and-bcnf-in-simple-terms-must-be-able-to-explain-to-an-8

			I. "candidate keys(候選鍵)"----可以唯一決定record的欄位集合(可能有很多種),不接受冗餘欄位, candidate keys 為super keys的子集合
			II. "super keys(超鍵)"----可以唯一決定record的欄位集合(可能有很多種), 接受冗餘欄位.
			III. "functional dependency(函數相依)"---- Y依賴X, 記做 X -> Y.   記住!! X -> Y表示若X確定了, 則Y也跟著確定, 不會有X為x, 然後Y可以為y也可以為z, 這樣表示Y不依賴X. 最簡單的例子: 一個人的名字依賴於身分證號, 身分正號確定後, 名字也確定.  你不會身分證號為1, 然後名字可以有小王, 小美, 這樣就表示名字不依賴身分號. 我之前以為X -> Y 表示X只要變化, Y必定跟著變化! 但是這樣對依賴的概念定義是完全錯誤的!!! 例如身分證號不同, 你可能名字會一樣!!!! 同名同姓的人可能會有!!! 所以觀念錯誤了!!! 
			IIII. "closure(閉包)"----一樣是集合論的概念, 假設一個集合S裡的元素, 經過F運算後仍然在該集合中, 則我們稱"這集合S在F運算下閉合(closed)", 當一個集合 S 在某個運算下不閉合的時候，我們通常可以找到包含 S 的最小的閉合集合。這個最小閉合集合被稱為 S 的（關於這個運算的）閉包(closure)!!!!

		e. 第四正規化(4NF): 「符合BCNF，再除去所有的多值相依 (Multi-Valued Dependency)」----> 多值相依: 關聯表R中有3個欄位以上, R(A,B,C), 主鍵為ABC, 而A對應B時, B有 多個值相對應﹔A對應C時, C有多個值相對應, B和C 無關
		以下有個非常精彩的解釋, 他舉的滿足BCNF但不滿足4NF的範例非常之精彩:
		https://en.wikipedia.org/wiki/Fourth_normal_form
			I. 4NF的直觀解釋: 他的意思其實就是一張表裡面, 若A與B是1對多, 且A與C是1對多, 若B,C互相獨立, 則他們應該拆分(或說獨立出去)成新的兩表, (A, B)和(A, C)

			II. 有個問題我比較好奇的是...A與B是1對多...但是B與A也是1對多啊. 同樣A,C的情況也是, 兩者是多對多的關係, 這該如何決定誰才是主要拆分的對象? 我難道不能拆分成(B, A), (B, C)??

		f. 第5正規(5NF)

		e. 在已知依賴關係的情況下candidate keys的找法(記住, candidate keys是super keys的最小子集合, 當然可能有很多個, 我們把所有的super keys找出, 自然能發現candidate keys)
			🤔. question1:
				R = {A, B, C, D, E}, function dependencies are: A->B, ED->A, BC->E, 則candidates keys為{A, C, D}, {B, C, D}, {C, D, E}
	
				Solution:
					其實很簡單, 一步一步做就很清楚了
					首先找出所有沒有考慮相依性的superkeys(其實就只有R本身而已)
					{A, B, C, D, E} 
					在找出只考慮一個相依性的superkeys
					{A, C, D, E} (在這裡我們替除了B, 因為A->B, B依賴A)
					{B, C, D, E} (在這裡我們替除了A, 因為ED->A, A依賴ED)
					{A, B, C, D} (在這裡我們替除了E, 因為BC->E, E依賴BC)
					接著按照上面的結果, 再多考慮一個相依性的superkeys
					{C, D, E} (在這裡我們從{A, C, D, E}出發, 考慮了ED->A)
					{B, C, D} (在這裡我們從{B, C, D, E}出發, 考慮了BC->E)
					{A, C, D} (在這裡我們從{A, B, C, D}出發, 考慮了A->B)
					接下來無法再依照相依性剔除任何元素了...所以superkeys為以下:
					{A, B, C, D, E}, {A, C, D, E}, {B, C, D, E}, {A, C, C, D}, {C, D, E}, {B, C, D}, {A, C, D}
					candidate keys為最小的子集合, 所以如下:
					{C, D, E}, {B, C, D}, {A, C, D}

			🤔. question2:
				R = {A, B, C, D}, function dependencies are: D->B, AB->D, AB->C, C->A, 則candidates keys為{C, D}, {A, B}, {B, C}, {A, D}

				solution: 
					一樣, 與上一題一模一樣的方式,找出所有superkeys
					{A, B, C, D}
					{A, C, D} (根據D->B) 
					{A, B, C} (根據AB->D)
					{A, B, D} (根據AB->C)
					{B, C, D} (根據C->A)
					{C, D} (根據D->B, C->A)
					{A, B} (根據AB->D, AB->C)
					{B, C} (根據AB->D, C->A)
					{A, D} (根據AB->C, D->B)
					{A, B} (根據AB->C, AB->D)
					{C, D} (根據C->A, D->B)
					剔除重複的狀況後, 得到candidate keys為
					{C, D}, {A, B}, {B, C}, {A, D}	

		f. decomposition(分解)
			I. 資料表的分解(decomposition), 會希望是"lossless join", 這表示分解出的表, 在join時不會有資料的缺少, lossless join成立的條件是"一張表分解成兩張表, 兩張表的相同屬性, 一定要是其中一張表的primary key!" (其實就是你一般分解時候的直觀過程).    lossless join 可以達到数据完整性、减少数据冗余、防止更新异常，还可以提高查询性能和增强数据独立性


	C. 索引(index):
		a. 基本解釋: 為何可以增加搜索數據的速度, 其實不難理解, 資料存入資料庫若是沒有任何資料結構, 那搜索將採用線性搜索, 也就是時間複雜度是O(n), 如果做了B-Tree(balanced m-way search tree)的索引結構, 那搜索速率自然提升到O(log(n)) 

		b. 缺點:  雖然索引(index)會使搜索效率提升, 但是insert, 或update的速率是會下降的, 因為他需要先找到, 才能插入或update, 但是沒做索引的話, 直接插入就好, 不用理會index的結構到底如何

		c. 叢集索引(cluster index), 非叢集索引(non-cluster index)
		reference: 
		https://www.youtube.com/watch?v=YuRO9-rOgv4
			I. 要理解這裡兩者的區別, 我們得先知道B+樹, 首先大部分的索引其實都使用B+樹(前面提到B-Tree, 只是方便說明, 其實應該是B+ tree), B+樹為了減小樹高(增加search效率), 而把值都存在葉節點, 其他節點只存key...
			II. 叢集索引的排列順序就是實際上(物理上)資料的排列順序(由於在實際物理上做了B+ tree結構, 所以更快)，而非叢集索引的排列順序不會/無法影響到實際資料的排列順序。 也因此，一個資料表中可以包含很多非叢集索引, 但只會有一個叢集索引。
			III. cluster新增資料較慢, 但查詢較快, noncluster新增資料較快, 但查詢較慢(兩者都比不做索引要快)


|#############################################################################################################|
5. transaction(交易)
沒時間了...除了講義以外, 記得看以下reference:
https://zhuanlan.zhihu.com/p/133823461
	A. ACID(Atomicity, Consistency, Isolation, Durability)
	reference:
	https://lance.coderbridge.io/2021/04/24/short-what-is-acid/

		a. Atomicity
			I. Transaction為最小單元, 不可再分割, Transaction內的運算只能一起成功或一起失敗
		b. Consistency
			I. Transaction的運算必須與現實世界的規則一致
		c. Isolation
			I. Transaction之間互相獨立, 彼此不會互相影響
		d. Durability
			I. Transaction commit 後, 其運算結果應在具有持久性

	B. Transaction的執行:
		a. 概念上, 一個交易是由數個以下五種基本運算動作所組成：
			I. begin(T)：表示一個交易T開始執行。
			II. read(X, x)：表示從硬碟讀取資料項X到主記憶體變數x。
			III. write(x, X)：表示將主記憶體變數x寫至硬碟資料項X。
			IV. commit(T)：表示一個交易T成功的結束。
			V abort(T)：表示一個交易T被駁回，其以前做過的動作因此全部還原。

	C. Transaction的並行處理(一般為了效率, 不會按順序處理, 都採並行)  --- 線上講義ch12
		a. 任意交錯執行(併發), 若是使用到了相同的數據, 可能會有以下問題:
			I. 更新遺失的問題（The Lost Update Problem）
			II. 污染讀取的問題（The Dirty Read Problem）
			III. 無法重複讀取的問題（The Non-repeatable Read Problem）
			IV. 幽靈資料的問題（The Phantom Problem）
			V. 要避免以上問題須使用"事務隔離", 以下有介紹

	D. Checkpoint機制:
	reference:
	https://www.newton.com.tw/wiki/CheckPoint
	http://debussy.im.nuu.edu.tw/sjchen/Database/Final/Ch09.pdf
		1. commit(無論是哪個transaction的commit)會把當前所有(包含所有transaction)的緩存history_log存入硬碟的history_log, checkpoint會把緩存的數據 和 緩存的history_log都存進硬碟, checkpoint是更新了硬碟的history_log, 也更新硬碟數據區 (需要注意的是, 妳的每一個資料庫操作, 增刪查改, 都會對 緩存區的數據有影響, 但不影響硬碟區, 只有checkpoint會把緩存區的數據寫入硬碟區的數據)
		2. 當機時, 資料庫系統會把硬碟區的history_log中, checkpoint紀錄之後若T1(某個transaction)有動作紀錄, 且最後有commit(在checkpoint之後了), 他會把checkpoint之後T1的動作redo().   若是checkpoint紀錄之後, 有T2(另一個transaction)有動作, 但是到了最後沒有commit, 則把T2在整個硬碟區的history_log中的執行動作, 全部undo()(即使部分的T2動作在checkpoint之前, 也要undo()), 其實等於abord T2. 記住 redo(), undo這些動作全部都會記錄在緩存區的history_log中, 且之後你有新的commit()動作, 這些undo(), redo()也都會被存入硬碟區的history_log. 此外,  undo(), redo()的動作會作用到硬碟的數據區! 記住!

	E. 隔離等級(Isolation等級)   ----> 用以解決Transaction並行時, 可能造成的問題
		a. 為提交讀(Read uncommitted)
			I. 允许事务读取其他未提交事务所做的更改。
			II. 可能会出现的问题：脏读（Dirty Read）、不可重复读（Non-repeatable Read）、幻读（Phantom Read）。
			III. 优点：性能最好，开销最低。
			IV. 适用场景：数据一致性要求较低的场景。
		b. 提交讀(Read Committed)
			I. 只能读取已提交事务的更改，避免了脏读。
			II. 可能会出现的问题：不可重复读、幻读。
			III. 优点：较好的性能和较低的开销。
			IV. 适用场景：大多数应用程序，数据一致性要求适中。
		c. 可重複讀(Repetable Read)
			I. 在同一个事务内，保证多次读取数据的一致性，避免不可重复读。
			II. 可能会出现的问题：幻读。
			III. 优点：更高的隔离性，适度的性能开销。
			IV. 适用场景：银行系统等需要较高数据一致性的场景。
		d. 可序列化(Serialiable)
			I. 提供最高的隔离级别，确保事务按某种顺序执行，避免所有并发问题（脏读、不可重复读、幻读）。
			II. 可能会出现的问题：由于严格的隔离，可能导致较多的事务冲突和锁争用，性能开销最大。
			III. 优点：最严格的数据一致性保证。
			IV. 适用场景：需要最高数据一致性的应用，如金融交易系统。

	F. 二阶段锁协议（2PL)  ----> 二阶段锁协议是一种常见的并发控制协议，用于确保事务的可序列化。它分为两个阶段:
	reference:
	https://zhuanlan.zhihu.com/p/133823461
	https://www.twblogs.net/a/5d407451bd9eee51fbf99a58
	https://www.itread01.com/articles/1476768602.html
		a. 基本定義:
			I. 在"!!!!!!一個事務(只看一個, 你不要很多個一起看)!!!!!!!"裏面，分爲加鎖(lock)階段和解鎖(unlock)階段,也即所有的lock操作都在unlock操作之
		b. 基本內容:
			I. 扩展阶段（Growing Phase）：
				🤔. 事务在此阶段可以获取锁（读锁和写锁），但不能释放任何锁。
				🤔. 当事务需要访问某个数据项时，它必须首先获取该数据项的相应锁。
			II. 收缩阶段（Shrinking Phase）：
				🤔. 事务在此阶段只能释放锁，不能获取新锁。
				🤔. 当事务释放第一个锁后，进入收缩阶段。

		c. 2PL可能會有的問題:
			I. 如果再某個transaction T1, 我還沒有commit前, 就unlock了(在2PL是可以的, 只要unlock都在一起, 你可以不要先commit), 之後我又突然把她T1 abort, 如果另一個transaction T2 在T1 unlock至abort之間有lock該資源, 則會造成她不會知道T1 abord, 進而讀取到T1沒有abord的結果, 這會造成錯誤!  所以一般實務上採用嚴格二階段所(S2PL)

	F-2. 嚴格兩階段鎖定法(Strict 2PL)
		a. 基本定義:
			I. 在"一個事務"中只有提交(commit)或者回滾(rollback or abort)時是解鎖階段，
		 b. 基本鎖定機制
			I. 每一個資料項都有附屬一個鎖（Lock），有三種可能值
				🤔. SHARED_LOCKED（分享鎖定 ）:讀取資料項前 ---> 可讀, 不可寫
				🤔. EXCLUSIVE_LOCKED（獨佔鎖定 ）：寫入資料項前 ---> 不可讀, 不可寫
				🤔. UNLOCKED （沒有鎖定 )：資料項處理完畢後  ---> 可讀, 可寫
			II. 遵守基本鎖定機制
				🤔. 運算動作執行完後並不馬上解除相關資料項的鎖定，而是到最後COMMIT或ABORT時才一起解除

	G. deadlock(死鎖) ----> 在二階段鎖, 或是嚴格二階段鎖機制之下, 可能產生的不良機制問題
		a. 發生機制:
			I. Mutual Exclusion:
				🤔. 一個resource一次只能被一個process用

			II. Hold and wait:
				🤔. process至少取到一個resource，然後等其他process握住的resource

			III. No preemption:
				🤔. 釋放資源時，是process自願的，沒有被中斷

			IIII. Circular wait:
				🤔. 每個process都在等另一個process握住的resource釋放(例如：P1等P2、P2等P3、P3等P1)，這也代表single process不會有deadlock

		b. 範例:
			I. Alice要使用資源x和y, Bob也要使用資源x和y
			II. Alice鎖定x, Bob鎖定y
			III. Alice等待y解除鎖定
			IIII. Bob等待x解除鎖定

		c. 解決辦法(發生在作業系統):
			reference: 
			https://ithelp.ithome.com.tw/articles/10206472

			I. Prevention(預防)
				🤔. 要在程式的設計上徹底考慮deadlock發生的情況, 設計起來很麻煩

			II. Aoidance(避免)
				🤔. Resource-Allocation Graph(RAG) 算法, 
					😄. 使用時機: 如果resource type 只有一個instance
				🤔. Banker's Algorithm 算法
					😄. 使用時機: 如果resource type有多個instance

			III. Detection(偵測): 容許deadlock發生, 但能偵測且恢復
				🤔. single instance:
					😄. 使用wait-for graph算法(跟RAG很像)
				🤔. several instance:
					🤔. 使用detection algorithm	

			IIII. Ignore(忽略)
				🤔. 當deadlock發生時, 系統就直接interrupt process
				🤔. 很多作業系統這樣做, 因為上面3種辦法都會消耗資源, 直接interrupt反而划算
		
		d. 解決辦法(發生在資料庫, 其解法與作業系統十分類似):
			I. deadlock detection與回滾:
				🤔. dbms定期檢查deadlock發生, 並採取回滾其中一個trasaction以解除deadlock

			II. deadlock overtime(超時):
				🤔. 設置一個超時時間, 超過該時間, trasaction仍處於deadlock, 則自動終止其中一個trasaction
			
			III. 優化database和查詢語句:
				🤔. 通過合理的database結構設計, 優化index, 減少trasaction持有lock的時間
	
			IIII. 使用鎖定機制: 
				🤔. 使用dbms提供的鎖定機制來手動管理trasaction之間的併發訪問, 避免deadlock

			IIIII. 調整trasaction隔離級別:
				🤔. 將trasaction級別從serializable調整為repeatable read或read committed

			IIIIII. 編寫應用程序時注意trasaction順序
		
|#############################################################################################################|
6. sql
reference: 50題練習
https://hackmd.io/@_7vFEnkKTve5g-aFhT8EvQ/Sy-H0QeWr#%E7%B7%B4%E7%BF%92%E9%A1%8C
	A. sql 指令主要可以分為以下幾種類型:
	reference:
	https://www.geeksforgeeks.org/sql-ddl-dql-dml-dcl-tcl-commands/
		a. DDL – Data Definition Language    ----> 用來定義資料(表, 欄位, 關聯)的結構
		b. DQL – Data Query Language    ----> 就是select...用來獲取資料內容
		c. DML – Data Manipulation Language  ----> 操控資料(包含增刪)欄位內容
		d. DCL – Data Control Language    ---->  用來設定資料庫使用者所具備的操作權限
		e. TCL – Transaction Control Language   ----> 用來控制transaction動作的
		f. 由於大部分對資料庫的操作是透過應用程序進行的(例如php, java, c#, python等等後端語言的api), 所以commit, rollback, savepoint有的沒的, 你在直接連到資料庫操作時, 很少會用到這些語法, 但是這些語法在後端api的運作中就很重要了!

	
	B. 常見regular expression

	C. sql 注入  -- 可以參考chatgpt的"高普考_資訊處理考科11", 我有跟AI討論了不同語言如何處理參數化查詢的問題
	reference:
	https://www.w3schools.com/sql/sql_injection.asp
		a. 標準處理方法:
			I. 採用"参数化查询"在以上referene有講到(注意不同後端語言的sql api會有不太一樣的方式, 大體精神一致)
			II. 採用ORM(object relation mapping), 這個你已經大致知道了, 其實ORM本身就自動使用了參數化查詢的方式, 而且內置一些防sql 注入的機制 -----> 現代開發多採用此法了, 簡單, 快速, 方便

	


|#############################################################################################################|
7. nosql (還是要稍微把基本語法都看過一遍)  ---->  遇到海量數據時, 使用nosql會更好, 因為高吞吐, 且不像sql會有條件約束
reference:
https://www.1ju.org/mongodb/mongodb-limit-record
以下參考是較為基本的教學
https://medium.com/@ralph-tech/mongodb-%E5%85%A5%E9%96%80-8254939c9383
	A. 性質:
		a. 可擴展性（Scalability）
			I. 理由：NoSQL數據庫設計時考慮了水平擴展（Horizontal Scalability），可以輕鬆地通過增加更多節點來擴展存儲和處理能力。這對於處理大數據量至關重要。 例如：Cassandra和HBase使用分散式架構，可以擴展到數百甚至數千個節點。
		b. 資料靈活性（Flexibility）
			I. 理由：NoSQL數據庫能夠處理多種數據格式，支持靈活的數據模型，如文檔模型（MongoDB）、鍵值模型（Redis）、列存儲模型（Cassandra）和圖模型（Neo4j）。這使得NoSQL數據庫能夠應對大數據的多樣性。例如：MongoDB支持JSON格式文檔，便於存儲和處理半結構化和非結構化數據。

		c. 高吞吐量與低延遲（High Throughput and Low Latency）
			I. 理由：NoSQL數據庫設計上強調高寫入和讀取吞吐量，並能提供低延遲的數據存取，這對於需要即時處理的大數據應用非常重要。例如：HBase在處理大量寫入操作時表現優異，適合用於實時數據分析。

		d. 適用於大數據, 海量數據
			I. 大數據分析與傳統數據分析比較:
				🤔. 大数据分析：  ---->通常採用非結構化數據, 數據隨便塞進去也要能分析
					😄. 大数据分析：通常需要使用分布式计算和存储技术来处理和分析大量数据，如Hadoop生态系统、Spark、NoSQL数据库等。这些技术能够处理数据的高速输入、高容量存储和实时分析需求。
					😄. 大数据分析：更倾向于实时分析和处理，以支持快速决策和实时应用（如实时推荐、反欺诈系统）。分析目标可能更加复杂，需要处理来自多个数据源的数据关系和模式。
					😄. 由于数据的多样性和来源的不确定性，数据质量和一致性可能面临更大的挑战。需要采取额外的数据清洗、校准和验证步骤来确保分析的准确性。通常採用非結構化數據
					😄. 大数据分析的一个显著特征是其处理非结构化和半结构化数据的能力。这些数据类型包括文本数据、社交媒体内容、图像和视频、传感器数据等，这些数据通常不适合传统的关系型数据库管理系统（RDBMS）处理。大数据技术（如Hadoop、Spark和NoSQL数据库）通过分布式存储和计算能力，使得处理这些数据变得更加高效和可行。

				🤔. 传统数据分析： --->通常採用結構化數據
					😄. 传统数据分析：主要用于历史数据分析、报表生成、BI（Business Intelligence）等传统应用，分析目标相对简单且更侧重于详尽的数据报告和趋势分析。
					😄. 传统数据分析：依赖于传统的关系型数据库管理系统（RDBMS）和商业智能工具，如SQL查询、OLAP分析、ETL（Extract, Transform, Load）过程等。这些工具和技术通常用于处理结构化数据和批处理分析。
					😄.  传统数据分析：主要集中在企业内部生成的结构化数据，如销售记录、客户信息、财务数据等。数据类型相对单一且更易于管理和处理。
					😄. 传统数据分析：主要集中在企业内部生成的结构化数据，如销售记录、客户信息、财务数据等。数据类型相对单一且更易于管理和处理。

	A. mongodb
		a. 基本架構和sql database很像, 以下是概念上的對應
			I. database(mongodb) -> database(sql db)
				🤔. 基本指令如下:
					😄. show databases;  ---> 顯示所有db
					😄. use database_name;  ---->使用指定的db, 若不存在則創建
			II. 常見資料結構: 
				🤔. {} 表示一個json, 即文檔
				🤔. [] 表示一個數組
			III. collection(mongodb) -> database(sql table)
				🤔. 基本指令如下:
					😄. show collections/show tables;
					😄. db.collection_name.insert({document_content})  ---->若不存在collection則創建, 你可以一次插入很多document_content(很多json, 用數組的形式表達即可)
					😄. db.collection_name.insertMany([{document_content}, {document_content2}.......])  ---->同insert()
					😄. db.collection_name.insertOne() 只能插入一個
					😄. 
				🤔. 性質:
					😄. collection 是多個json文檔的集合, 外面時常用'[]'包住, 但她不是數組, 只是表示用而已												
					😄. 同一个 collection 中的json文档不需要具有相同的格式, 也就是說[{test1: "testValue1"}, {example1: "exampleValue", exmaple2: "exampleValue2"}]這樣的類型是完全可以的, 這也是他靈活的地方`

				🤔. 查(query):
					😄. db.collection_name.find({查詢條件})
						😄. ex:  db.cities.find({capital: true})

					😄. 常見的比較條件用法參數:
						😄. $eq: equal
						😄. $gt: greater than
						😄. $gte: greater than or equal
						😄. $in: if in the array
						😄. $lt: less than
						😄. $lte: less than or equal
						😄. ne: not equal
						😄. nin: if not in the array
						😄. ex: db.cities.find({area: {$gt: 1000}})

					😄. 邏輯條件(and, or, not...)
						😄. and:
							😄. db.users.find({
								  "$and": [
								    { "age": { "$gt": 20 } },
								    { "hobbies": "reading" }
								  ]
								});
						😄. or:
							😄. db.users.find({
								  "$or": [
								    { "age": { "$lt": 20 } },
								    { "hobbies": "swimming" }
								  ]
								});

						😄. not:
							😄. db.users.find({
								  "age": { "$not": { "$eq": 30 } }
								});

						😄. nor 用于将多个条件组合在一起，所有条件都不满足时匹配文档。
							😄. db.users.find({
								  "$nor": [
								    { "age": { "$gt": 20 } },
								    { "hobbies": "swimming" }
								  ]
								});
						😄. 结合多个运算符来构建复杂查询： 
							😄. db.users.find({
								  "$and": [
								    { "age": { "$gte": 20, "$lte": 30 } },
								    {
								      "$or": [
									{ "hobbies": "reading" },
									{ "hobbies": "swimming" }
								      ]
								    }
								  ]
								});

				🤔. 改(update)
					😄. db.collection_name.updateOne({查詢條件}, {$set: {更改後的內容}}) -->修改符合條件的第一筆文件
					😄. db.collection_name.updateMany({查詢條件}, {$set: {更改後的內容}}) -->修改符合條件的所有文件

				🤔. 刪(delete)
					😄. db.collection_name.deleteOne({查詢條件})  --->刪除第一筆符合條件的文件
					😄. db.collection_name.deleteMany({查詢條件}) --->刪除符合條件的所有文件

				🤔. 聚合(aggregate)
					😄. 基本用法:  --->()函數裡面擺放'[]', 跟創建時類似
						😄. db.article.aggregate([{$group : {_id : "$by_user", num_tutorial : {$sum : 1}}}])  ---->對應sql
							SELECT by_user, COUNT(*) AS num_tutorial
							FROM article
							GROUP BY by_user;

						😄. db.employee.aggregate([
							   { $match: { status: "A" } },
							   { $group: { _id: "$employee_id", total: { $sum: "$field" } } }
							])   ---->對應sql
							SELECT employee_id, SUM(field) AS total
							FROM employee
							WHERE status = 'A'
							GROUP BY employee_id;
						😄. db.collection.aggregate([
							  { $match: { field: "value" } }
							])  ---->對應sql
							SELECT * FROM collection
							WHERE field = 'value';

						😄. db.collection.aggregate([
							  { $project: { field1: 1, field2: 1, newField: "$oldField" } }
							]) ---->用于选择返回文档的特定字段，可以重命名字段或计算新字段。  對應sql
							SELECT field1, field2, oldField AS newField
							FROM collection;

						😄. db.collection.aggregate([
							  { $sort: { field: 1 } }
							]) ---->對應sql
							SELECT * FROM collection
							ORDER BY field ASC;
						😄. db.collection.aggregate([
							  { $limit: 5 }
							]) ---->對應sql
							SELECT * FROM collection
							LIMIT 5;

						😄. db.collection.aggregate([
							  { $skip: 10 }
							])  --->對應sql
							SELECT * FROM collection
							OFFSET 10;

						😄. db.collection.aggregate([
							  { $group: { _id: "$groupField", maxValue: { $max: "$valueField" } } }
							]) --->對應sql
							SELECT groupField, MAX(valueField) AS maxValue
							FROM collection
							GROUP BY groupField;

						😄. db.collection.aggregate([
							  { $group: { _id: "$groupField", minValue: { $min: "$valueField" } } }
							]) ---->對應sql
							SELECT groupField, MIN(valueField) AS minValue
							FROM collection
							GROUP BY groupField;

						😄. db.collection.aggregate([
							  { $group: { _id: "$groupField", avgValue: { $avg: "$valueField" } } }
							])  ---->對應sql
							SELECT groupField, AVG(valueField) AS avgValue
							FROM collection
							GROUP BY groupField;




				


|#############################################################################################################|
8. 資料倉儲
	A. 定義:
		a. 通常集合了多個資料庫的資料, 他的目的是把多方面(或多個系統)的資料統一集中儲存和處理, 而通常資料庫的資料只針對一個系統

	B. 與資料庫的區別:
	reference:
	https://stackoverflow.com/questions/3419353/what-is-the-difference-between-a-database-and-a-data-warehouse
	注意腰果的答案
	https://www.zhihu.com/question/24110442
		a. 資料庫:  --> 有效地檢索、更新和管理資料。
			I. 資料庫使用OLTP(online Transaction processing) 
			II. 資料庫通常用於再線的業務處理
			III. 通常要求正規化, 節省儲存空間
			IV. 不適合用來分析(效率不好)

		b. 資料倉儲 --> 用於集成和分析大量資料的系統，通常來自於不同來源的資料
			I. 資料倉儲使用(OLAP, online analytical processing)
 			II. 資料倉儲用於數據分析, 數據挖掘, 機器學習, 特徵分析
			III. 不正規化, 為了節省分析需求所花費的時間, 增加效率
			IV. 適合拿來分析

	C. 常見操作
		a. 上卷（Roll Up）/聚合：选定某些维度，根据这些维度来聚合事实，如果用SQL来表达就是select dim_a, aggs_func(fact_b) from fact_table group by dim_a.e.g. 风控场景：点赞场景，决策REJECT，UV多少
		b. 下钻（Drill Down）：上卷和下钻是相反的操作。它是选定某些维度，将这些维度拆解出小的维度（如年拆解为月，省份拆解为城市），之后聚合事实。e.g. 风控场景：点赞场景，命中规则A，决策REJECT，UV多少
		c. 切片（Slicing、Dicing）：选定某些维度，并根据特定值过滤这些维度的值，将原来的大Cube切成小cube。如dim_a in ('CN', 'USA')e.g. 风控场景：点赞场景，命中规则A、规则B，规则C，决策REJECT，UV是多少
		d. 旋转（Pivot/Rotate）：维度位置的互换
		


|#############################################################################################################|
9. 資料儲存設備和架構:
reference:
https://blog.csdn.net/heguanghuicn/article/details/79478036
https://www.iteye.com/blog/wallimn-1290721
	A. File server
	B. DAS(Directed-attached Storage)
	C. NAS(Network-Attached Storage)
		a. 通过TCP/IP协议访问数据，采用业界标准文件共享协议，如果NFS、HTTP、CIFS实现共享。

	D. SAN(Storage Area Network) 一般說的SAN指的是FC-SAN(Fibre Channel SAN), IP-SAN等等說明
		a. 基本定义：SAN（Storage Area Network）是一个专用的高性能网络，用于将多个存储设备集中在一起，使其能够被多个服务器高效访问。SAN 使用适当的技术，光纤通道（Fibre Channel)和SCSI，提供高带宽和低延迟的数据传输。虽然 SAN 是一个独立的网络，但它通常通过服务器与组织的局域网（LAN）和广域网（WAN）集成，形成一个整体的存储解决方案。
			I. Fibre Channel ----> 使用SCSI:
			reference:
			https://en.wikipedia.org/wiki/Fibre_Channel
			https://www.zhihu.com/question/24669457
				🤔. 快但貴
				🤔. 他並不基於ethernet(也不基於TCP/IP), 而是獨立的一個協議(也不屬於OSI模型中)

			II. SCSI(small computer system interface):
				🤔. 是一套独立的分层系统，不依赖于传统的网络协议栈（如MAC、IP、TCP）。SCSI协议设计用于计算机和存储设备之间的直接连接和数据传输，具有自己的分层结构和命令集(獨立於OSI七層, 自成一體)
				🤔. 硬碟等存儲設備讀寫效率不同於一般的電腦, 所以需要特別的協議讓讀寫更有效率, 因此SCSI誕生
				🤔. 用于计算机与存储设备之间的连接和数据传输

		b. 优点：
			I. 擴展性高（Scalable）：SAN 的设计允许轻松扩展存储容量，只需在 SAN 中直接增加存储设备即可，无需大幅修改现有架构。
			II. 容错能力强（High Fault Tolerance）：SAN 通常配置 RAID（如 RAID 1 镜像、RAID 5 奇偶校验等），具备数据镜像、冗余恢复、备份等功能，防止数据损毁。
			III. 高速（High Performance）：SAN 网络采用高带宽、低延迟的技术，如光纤通道(Fibre Channel Protocol (FCP) is a protocol that transports SCSI commands over Fibre Channel networks)或，提供快速的数据传输速度，适合高性能计算和大数据处理需求。

		c. 缺点：
			I. 成本高（High Cost）：SAN 系统的硬件设备（如光纤通道交换机、存储设备）、管理软件以及维护成本较高，适合大型企业和需要高性能存储解决方案的组织。

	E. IP-SAN
		a. 基本定義: 他在架構理念上與SAN相同, 但是不使用Fibre Channel協議, 而是使用了TCP/IP協議來傳輸資料, 這讓佈署和管理的成本大大降低, 當然她就比較慢了,  使用了iSCSI協議(FC-SAN使用Fibre Channel, 和SCSI)
			I. iSCSI(Internet small computer System Interface)
				🤔. iSCSI是一个将SCSI命令封装在TCP/IP数据包中的协议，通过标准以太网进行传输。
				🤔. 在IP-SAN中，存储设备和服务器通过以太网交换SCSI命令和数据。
				🤔. IP网络设备（如以太网交换机、路由器和标准网络接口卡（NIC））组成了一个使用TCP/IP协议的存储网络。

		b. 優點: 
			I. 成本低：具備FC-SAN的基本優點, 同時利用现有的以太网基础设施，降低了硬件和维护成本。
			II. 灵活性：可以使用标准的网络设备，易于扩展和管理。
			III. 广泛兼容：支持通过广域网（WAN）进行远程存储访问和数据备份。

		c. 缺點:
			I. 性能较低：虽然现代以太网（如万兆以太网）性能已经很高，但在某些高性能应用中，仍可能不如Fibre Channel。
			II. 网络冲突：与其他网络流量共享带宽，可能导致网络拥塞和性能下降。

	F. FC-SAN vs IP-SAN, 市場優勢比較?
	reference:
	https://cloud.baidu.com/article/2988731
	https://searchstorage.techtarget.com.cn/6-16857/
			




|#############################################################################################################|
10. 資料庫考題
選擇題(不分章節):
https://www.itest.org.tw/PDF/9912exam/IDD-9912.pdf
https://www.takming.edu.tw/course/%E4%B8%89%E5%B9%B4%E7%B4%9A%E8%B3%87%E6%96%99%E5%BA%AB.pdf

選擇題(分章節):


申論題(分章節):
https://www.mis.nsysu.edu.tw/db-book/pro_ch3.html
參考book:
https://www.mis.nsysu.edu.tw/db-book/pdf/ch1.pdf
http://debussy.im.nuu.edu.tw/sjchen/Database/Final/Ch03.pdf

申論題2:
http://debussy.im.nuu.edu.tw/sjchen/Database/Final/Ch06.pdf



8. 
