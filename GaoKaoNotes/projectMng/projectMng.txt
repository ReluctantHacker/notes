|#############################################################################################################|
1. 專案管理5大流程:
	A. 啟動 - 定義專案範圍，確認專案目標 (start)
	B. 規劃 - 提出專案規劃與設計，組織專案成員 (plan)
	C. 執行 - 資源配置與整合、跨部門溝通、細項工作執行 (do)
	D. 控管 - 掌握專案完成度、時間、資源、預算 (control)
	E. 結案 - KPI、指標的檢討、知識的萃取與整理 (end)


|#############################################################################################################|
2. 系統開發5大步驟(系統分析, 系統設計, 系統開發, 系統測試, 系統部屬,維護) 也叫做軟體開發生命週期(Software Development Life Cycle，SDLC)
	A. 系統分析(需求分析)
		a. ERM(entity relationship model)
			I. ER diagram
				🤔. 用途: 資料庫設計
				🤔. chen's notation
				🤔. crow's foot(就是你熟悉的那種圖)
				🤔. 參考資源: https://www.lucidchart.com/pages/er-diagrams
				
		b. DFD(data flow diagram)

		c. UML(unified modeling language)
			I. class diagram(類圖, 最重要)
				🤔. 用途: 物件導向程式設計
				🤔. class和instance的關係, 可能如下
					😄. class level:
						😄. Generalization/Inheritance(就是繼承關係): A is a type of B.
						😄. Realization/Implementation(就是接口關係): A implements B, which is an interface.
							😄. 通常父類只會有一個! 但是接口可能有好幾個, 例如鳥是動物, 也就是動物是鳥的父類, 那飛行所需要的技能就是所謂的接口! 總之就是"特化"的東西(父類中不需要包含的東西), 可以獨立用一個接口來實現.
					😄. instance level:
						😄. have:
							😄. Aggregation: A owns B, but both has its own lifecycle.
							😄. Composition: B is part of A, follow A's lifecycle
						😄. use:
							😄. Dependency: A uses B but in a weak relationship. If one changes many affect another one. 直接來說, 其實就是A class的某個function用到B作為parameter
							😄. Association: A knows B. Static relationship between A and B. 直接來說, 其實就是A class使用B作為其屬性

				🤔. 參考資源: 
					https://misomiso43.medium.com/%E7%B0%A1%E5%96%AE%E7%90%86%E8%A7%A3-uml-%E9%A1%9E%E5%88%A5%E5%9C%96-f0b32a3272c
					https://blog.csdn.net/m0_71417856/article/details/130467940
					https://codegym.cc/tw/groups/posts/tw.104.chou-xiang-lei-he-jie-kou-de-qu-bie
					https://m.imooc.com/qadetail/107540
					這裡有一個參考滿詳細的, 但是association和combination的地方怪怪的:
					https://spicyboyd.blogspot.com/2018/07/umlclass-diagram-relationships.html

				🤔. 練習題目:
					https://dotblogs.com.tw/unified_modeling_language/2019/04/01/115230
					https://www.uml-diagrams.org/software-licensing-domain-diagram-example.html?context=cls-examples
				
				🤔. ORM(Object-Relational Mapping)
					😄. 在現代軟體開發中是很重要的一種實現
					😄. 其實就是把軟體程式中所使用的類別(class)模型映射到資料庫模型
					😄. 你在miyue他們python後端就是使用ORM, 所以才會發現他們程式裡面有一堆資料庫欄位的"類別(class), 而且要對資料庫操作, 是直接寫python指令, 在較OP去執行
					😄. 讓你不需要實際去輸入sql語句來操作資料庫!!!方便
					😄. 阻擋了一部份的sql injection

			II. use case diagram
			reference:
			https://ithelp.ithome.com.tw/articles/10224701
			III. sequence diagram
			reference:
			https://ithelp.ithome.com.tw/articles/10224701
			IIII. activity diagram
			reference:
			https://ithelp.ithome.com.tw/articles/10224701
			IIIII. state diagram
			IIIIII. component diagram
			IIIIIII. deployment diagram
			
	B. 系統設計
		a. 系統架構設計
			I. 2-tier
				🤔. 定義: 操作和系統資料處理分成2層次
				🤔. 例如:
					😄. Desktop application
					😄. excel sheets,
					😄. word document,
					😄. desktop games
			II. 3-tier
				🤔. 定義: 操作和系統資料處理和資料儲存分稱3層次
				🤔. 例如:
					😄. 大部分的web-application
			III. web-base
				🤔. 基於web, 能用瀏覽器操作

			IIII. 分散式架構(distributed computging)
				🤔. 理論基礎
					😄. CAP theorem:
						😄. Consistency
						😄. Available
						😄. Partition tolerance
						😄. 以上三大性質最多只能同時成立兩個

				🤔. 使用技術:
					😄. IPC(進程間同訊, Inner process communication)
					reference:
					https://morosedog.gitlab.io/technology-20200229-tech-6/
					https://baike.sogou.com/v7857011.htm
					https://stackoverflow.com/questions/2161674/is-there-a-difference-between-rpc-and-ipc
					https://www.zhihu.com/tardis/zm/art/426303359?source_id=1005
					https://www.zhihu.com/question/41609070

						😄. 概念:
							😄. 進程之間通訊是有限制的
							😄. IPC就是要想辦法突破

						😄. 實作分類
							😄. 管道(pipe)
							😄. 系統IPC
								😄. 消息列隊(message queues)
								😄. 信號(signal)
								😄. 共享內存(shared memory)
							😄. 套接字(socket)
							😄. 消息傳遞(messsage passing)
								😄. RPC(remote process call) --- *被廣泛使用
									😄. 首先RPC是在一個正在記憶體中執行的function調用另一個正在另一個記憶體區塊執行中的function的技術, 他是IPC(Inter-Process Communication, 進程間通訊)的實作, 由於進程間通訊有限制, 所以需要IPC, 而RPC便是其最廣泛的實作, 被廣泛運用在分散式系統
								
				🤔. 實際範例:
					😄. 幾乎所有雲服務(cloud services)

				🤔. CDN(內容傳遞網路, content delivery(distribution) network)
					😄. 其實CDN和分散式架構只有間接關係, 但由於他的重要性, 這裡還是提一下
					😄. 現在幾乎所有的網路都會用到CDN
					😄. 技術:
						😄. 使用了"緩存服務器"來分擔源服務器的流量負擔,
						😄. 藉由把用戶需求過的內容存到就近的緩存服務器,
						😄. 源服務器只需要與緩存服務器有流量交往就好而不需要對所有用戶有流量交往,
								  ____ client
							No CDN	 |     
							 ________|____ client
						 	|        |
							| server |____ client
							| 負擔大 |
							 --------|____ client
								 |
								 |____ client

							                            _____ client
								  ____ CDN server__|
							with CDN |  (緩存部分內容) |_____ client
							 ________|
						 	|        |                  _____ client
							| server |____ CDN server__|
							| 負擔小 |                 |_____ client
							 --------|                  
								 |                  _____ client
								 |____ CDN server__|
										   |_____ client

				🤔. 鏡像服務器(mirror server)
					😄. 镜像服务器(Mirror server)与主服务器的服务内容都是一样的，只是放在一个不同的地方，分担主机的负载。
					😄. 简单来说就是和照镜子似的，能看，但不是原版的。在网上内容完全相同而且同步更新的两个或多个服务器，除主服务器外，其余的都被称为镜像服务器。 光盘镜像服务器一般采用BNC和 RJ-45标准网络接口，设置、升级和管理均可通过WEB浏览器或网上邻居远程进行。

			IIIII. 主從式架構(client-server model, c/s model)
			IIIIII. 服務導向架構(SOA, Service-oriented architecture)
			IIIIIII. 微服務(microservices)
				🤔. 由SOA演變而來

		b. 結構化設計:
			I. 現在大部分的系統都採用"低耦合, 高內聚"
			II. 耦合: 模組(或功能)和模組之間的相依性
			III. 內聚: 模組(或功能)內部組件之間的相依性
			IIII. 參考資源: 
				https://www.zhihu.com/question/347264877/answer/834666851

	C. 系統開發

	D. 系統測試
		a. 測試項目:
			I. 功能测试(Functional Testing):
				🤔. 验证系统的功能是否符合需求和规格说明, 包括单元测试, 集成测试, 系统测试等
			II. 性能测试(Performance Testing)
				🤔. 测试系统的性能, 包括响应时间, 吞吐量, 并发用户量等, 以确保系统在各种负载条件下能够正常运行
			III. 安全测试(Security Testing)
				🤔. 验证系统的安全性, 包括身份验证, 授权, 数据加密, 漏洞扫描等, 以确保系统对潜在威胁有足够的防御能力
			IIII. 兼容性测试(Compatibility Testing)
				🤔. 测试系统在不同平台, 操作系统, 浏览器, 设备等环境下的兼容性, 以确保系统在各种情况下都能正常工作
			IIIII. 可用性测试(Usability Testing)
				🤔. 评估系统的易用性和用户体验, 包括界面设计, 导航结构, 操作流程等, 以确保系统对用户友好并容易上手
			IIIIII. 回归测试(Regression Testing)
				🤔. 在系统经过修改或更新后重新运行之前的测试用例, 以确保修改不会影响系统的其他功能和性能
			IIIIIII. 壓力測試(Stress Testing)
				🤔. 在系统达到其容量限制时进行测试, 以确定系统在负载过重或异常情况下的稳定性和可靠性
			IIIIIIII. 恢复测试(Recovery Testing)
				🤔. 测试系统在发生故障或异常情况后的恢复能力, 包括数据恢复, 系统重启, 备份和恢复等

		b. 測試流程:
			I. Unit Test(單元測試)
			II. Integration Test(整合測試)
			III. System Test(End-to-end Test, 系統測試)
			IIII. Stress test(壓力測試)----其實就測試系統在甚麼條件下能正常運作, 若超出這個條件系統便會不穩定甚至崩壞
			IIIII. Accentance test(接受度測試)

	E. 系統部屬與維護
		a. 相關人員:
			I. 維運(OP, operation)
			II. SRE(Site Reliability Engineering, 網站可靠性工程)
				🤔. 性質:
					😄. 注重服務的可靠性和穩定性, 通常使用CI/CD
					😄. 簡單來說就是讓有開發能力的工程師去做運維(創造這個的google工程師說的)
			III. DevOPs(development+OPs, 開發+維運) 
				🤔. 性質:
					😄. 注重dev和ops的合作效率, 兩者最好要兼具對方的部分技能, 通常使用CI/CD
					😄. DevOps比較像是一種工作理念
		b. 相關技術:
			I. CI/CD(持續集成/持續交付, Continuous Integration/Continuous Delivery)
				🤔. 持續集成(Continuous Integration, CI):
					😄. 版本控制系统(VCS): 使用像Git这样的版本控制系统, 确保开发团队能够有效地管理代码
					😄. 自动化构建: 使用构建工具(如Jenkins、GitLab CI、Travis CI等), 自动化地构建代码, 并执行单元测试和静态代码分析
					😄. 单元测试: 编写和运行单元测试, 以确保代码的质量和稳定性
					😄. 续集成服务器: 配置持续集成服务器, 监视版本控制系统的变化, 并触发自动化构建和测试流程

				🤔. 持续交付(Continuous Delivery, CD)
					😄. 持续集成的延伸: 将持续集成扩展到持续交付阶段, 包括构建, 测试, 部署和发布
					😄. 自动化测试: 执行自动化的功能测试, 集成测试和端到端测试, 确保应用程序在各种环境中的稳定性和一致性
					😄. 环境部署: 自动化环境部署, 包括开发环境, 测试环境和生产环境, 以确保部署过程的一致性和可靠性
					😄. 蓝绿部署(Blue-Green Deployment): 使用蓝绿部署技术, 在新版本部署之前先将新版本部署到另一个环境中, 然后通过切换流量来实现零停机更新
					😄. 灰度发布(Canary Release): 使用灰度发布技术, 逐步将新版本部署到生产环境中的一部分用户, 以降低风险并及时发现问题

				🤔. 持续部署(Continuous Deployment, CD)
					😄. 自动化部署: 将持续交付的流程扩展到持续部署阶段, 实现自动化的部署和发布
					😄. 自动化回滚: 配置自动化的回滚机制, 以便在部署失败或出现问题时快速恢复到之前的稳定版本 
					😄. 监控和警报: 集成监控和警报系统, 实时监视应用程序的性能和健康状态, 及时发现并解决问题


|#############################################################################################################|
3. 系統開發專案計畫書, 基本項目
	A. 專案概述
	B. 需求分析
	C. 技術方案
	D. 專案計劃
	E. 風險管理
	F. 質量保證
	G. 溝通計劃
	H. 可行性分析
	I. 驗收標準
	J. 維護計劃

|#############################################################################################################|
3. 系統開發常見的模型
	A. 重量級(heavyweight)
		a. 定義:
			重量级开发方法通常指的是具有复杂结构和完整功能的开发框架或方法。这种方法通常具有严格的规范和标准，涵盖了全面的开发过程，包括需求分析、设计、开发、测试、部署和维护等各个阶段。重量级开发方法需要较长的时间来规划和实施，通常需要大量的人力资源和资金投入。它们适用于复杂的软件项目，如企业级应用、大型系统或关键业务应用等。
		b. 範例:
			I. 瀑布開發模型(waterfall model)
			II. RUP(Rational United Process)
				🤔. 將大系統切割成小專案進行"迭代"
			III. 螺旋模型(spiral model)
				🤔. 兼具RAP與系統發展生命週期模型
			III. CMMI

	B. 輕量級(lightweight)
		a. 定義:
			轻量级开发方法强调简单、灵活和迭代的开发方式，通常更加注重快速交付和持续改进。这种方法通常更加灵活，能够快速响应需求变化和用户反馈。轻量级开发方法通常简化了开发过程，去除了一些繁琐的规范和流程，注重于核心功能的实现和用户价值的提供。它们适用于小型团队或项目，如创业公司、敏捷开发团队等。

		b. 範例:
			I. 敏捷開發(agile)
				🤔. scrum
					😄. 短迭代週期(稱之為sprint): 2~4 weeks
					😄. sprint planning meeting: 每次sprint前meet
					😄. 每日站會(daily scrum meeting): 會報昨日進度, 今日計畫
					😄. 成員組成:
						😄. Product Owner
						😄. Scrum Master: usually chose from the scrum team
						😄. Development Team: including 开发人员、测试人员、设计师等
				
				🤔. EP(Extreme programming)

			II. RAD(rapid application deveopment)
				🤔. 軟體原型(Software prototyping)
				🤔. 迭代開發




|#############################################################################################################|
4. 系統轉換
	A、直接转换(pilot operation))：
		在确定新的管理信息系统运行准确无误时，在某一时刻终止现行系统，启用新的管理信息系统。这种转换方式费用低，方法简单，但风险大。适合于处理过程不太复杂的小型简单系统。

	B、并行转换(parallel operation)：
		新的管理信息系统和现行系统并行工作一段时间，在新的管理信息系统运行准确无误时，替代现行系统。这种转换方式有利于减轻管理人员心理压力、安全性较好，但费用高，两个系统的数据一般不具备可比性。适合于处理过程复杂、数据重要的系统。

	C、分段转换(phased operation)：
		是直接转换和并行转换的结合，分阶段将新的管理信息系统的各个子系统替代现行系统。这种转换方式心理、安全性较好，但费用高。适合于处理过程复杂、数据重要的大型复杂系统。一般多采用这种方式进行系统转换。

	D. 試驗轉換(pilot operation, 與直接差不多, 有時候當成同一個):
		试点运营的基本思想是先在一个较小的范围内，例如某个特定的部门、项目组或者地区，部署新系统并让其运行一段时间，以验证系统的可行性、稳定性和有效性。確定OK在一次全面更換至新系統.


 
|#############################################################################################################|
5. 品質管理
reference:
https://www.cnblogs.com/ivy-zheng/p/15844172.html

	A. CMMI(能力成熟度模型整合, Capability Maturity Model Integration)---->注重組織開發能力的提升
		a. 是一種衡量軟體開發組織作業成熟度的一個標準(也可用別的領域)
		b. 可以考取證照, 這個證照對公司的對外形象大有加分
		c. 分級:
			I. 成熟度1: initial
				🤔. Processes unpredictable, poorly controlled and reactive
			
			II. 成熟度2: managed
				🤔. Processes characterized for projects and is often reactive
			
			III. 成熟度3: defined
				🤔. processes characterized for the organization and is proactive

			IV. 成熟度4: quantitatively managed
				🤔. Processes measured and controlled 

			V. 成熟度5: optimizing
				🤔. Focus on process impovement

		d. 好處:
			I. 提高组织的效率和质量： CMMI帮助组织建立和改进其过程，使其能够更有效地交付高质量的产品和服务。

			II. 降低风险： 通过实施CMMI，组织能够更好地管理项目和过程，减少出现问题和失败的风险。

			III. 提高客户满意度： CMMI有助于组织提供更可靠、高质量的产品和服务，从而提高客户的满意度。

			IV. 提升竞争力： 具备CMMI认证的组织通常会在市场上更具竞争力，因为他们能够提供更可靠和高质量的产品和服务。

			V. 改善团队合作和沟通： CMMI鼓励团队之间的合作和沟通，有助于减少误解和冲突，提高工作效率。


	B. PSP(personal software process): ----->注重個人開發能力的提升
		a. 過程管理
		b. 大小估計
		c. 時間估計
		d. 質量管理

	C. TSP(team software process): ----->注重團隊開發能力的提升
		a. 團隊協作
		b. 質量管理
		c. 風險管理
		d. 過程管理
				


|#############################################################################################################|
5. 成本控制
	A. COCOMO(Constructive Cost Model) ----> 技術上需要花費多少"人力成本", "時間成本"
	reference:
	https://techdifferences.com/difference-between-cocomo-1-and-cocomo-2.html

		a. Basic COCOMO	
			I. 適用初期開發或小型專案
			II. 不考慮EAF

		b. 中級COCOMO
			I. 適用中型專案, 
			II. 考慮EAF

		c. 高級COCOMO 
			I. 基於以上兩者的改進版本, 考慮了專案的所有階段
			II. 適用大型專案

		d. 基本公式:
			I. Effort = a * (LOC)^b * EAF,         其中Effort簡寫可以表示為E, 單位為"人月(人數*月數)", LOC為(lines of code, 也可以叫做SLOC(source lines of code)), 而EAF則是Effort Adjustment Factor(在中級模型及詳細模型才有這個因子), 他是一個開發內容以外的影響因素集合體, 考慮了工具的使用、开发环境、人员素质等

			II. Duration = c * (Effort)^d,          其中Duration簡寫可以表示為D, 我們可以發現, 開發所需時間為Effort的次方

			III. People = Effort/Duration,           其中People簡寫可以表示為P

	B. COCOMO II       ------> COCOMO的進化版本!!
		a. 應用開發模型
		b. 早期設計模型
		c. 重用模型
		d. 後架構模型
		e. 與cocomo I的差異
			I. COCOMO是線性的, COCOMO II為非線性
			II. COCOMO使用代碼行數來表示軟體大小, COCOMO II使用object數量, function 數量, 代碼行數...
			III. COCOMO II還使用了縮放因子(scaling factor)

	B. 成本效益分析(Cost-benefit analysis) -----這是一個經濟學概念, 與技術沒有任何關係, 他適用在任何商業行為
		a. 折現率---------- 你把錢放著不動(你可以方銀行, 也可以怎樣怎樣的因素考慮進去), 你的錢自動放大的比例, 例如100萬, 明年便105萬, 我們稱作折現率5%, 你的錢變成1.05倍
			有個折現率的說明(可以參考北洋投教的說明):\
				https://www.zhihu.com/question/301077862

		b. 現值(present value)-------------就是把未來的錢的大小(面值), 按照折現率換成現在的錢大小

		c. 淨現值(net present value)------------就是我們主要想計算的東西, 他就是把所有的錢按照各自的折現率, 計算回現值, 再減去所花費的錢(一樣是現值), 所得到的結果(其實也就是到底賺多少).  也可說是: 淨現值係指一個投資項目的全部現金流入的折現值和全部現金流出的折現值之間的差額.   所謂淨現值係指一個投資項目的全部現金流入的折現值和全部現金流出的折現值之間的差額。 如果NPV>0，說明該投資的現金流入現值大於現金流出現值，其結果可以增加淨利。 淨現值法要求比較各個可行投資方案的淨現值，並選擇可達成淨利最大化的投資項目。 

	C. 時程管理
		a. 績效指標
			I. KPI(key performance index)
				🤔. 採用SMART標準
					😄. S 代表具體(Specific):
						😄. 指績效考核要切中特定的工作指標，不能籠統；
					😄. M 代表可度量(Measurable): 
						😄. 指績效指標是數量化或者行為化的，驗證這些績效指標的數據或者信息是可以獲得的；
					😄. A 代表可實現(Attainable): 
						😄. 指績效指標在付出努力的情況下可以實現，避免設立過高或過低的目標；
					😄. R 代表關聯性(Relevant): 
						😄. 指績效指標是與上級目標具明確的關聯性,最終與公司目標相結合；

					😄. T 代表有時限(Time bound): 
						😄. 注重完成績效指標的特定期限。	

			*以下兩個專門用於時程專案管理
			II. SPI(schedule performance index)
				🤔. SPI其實就是專案的完成度, 
				🤔. SPI=實際完成/預計完成
				🤔. SPI=EV/PV,   
					😄. EV(Earned value): 某時間點已經完成的工作量(通常單位為時間)
					😄. PV(Planned value): 某時間點應該完成的工作量(通常單位為時間) 
					😄. 時程變異(schedule variance, SV): SV=EV-PV
						😄. 表示: 計畫完成PV, 但完成了EV, 
						😄. SV是差異:
							😄. +表示超前, 
							😄. 0表示剛好
							😄. -表示落後
					😄. 以上結論也可總結成:
						😄. SPI>1: 超前
						😄. SPI=1: 剛好
						😄. SPI<1: 落後

			III. CPI(cost performance index)
				🤔. CPI其實就是專案的花費程度, 
				🤔. CPI=實際花費/預計花費 
				🤔. CPI=EV/AV
					😄. EV(Earned value): 某時間點已經完成的工作量(通常單位為時間)
					😄. AV(Actual cost): 某時間點實際花費的工作量(通常單位為時間) 
					😄. 成本變異(Cost variance, CV): CV=EV-AV
						😄. 表示: 實際用了AV, 但完成了EV, 
						😄. CV是差異
							😄. +表示結餘,
							😄. 0表示剛好 
							😄. -表示超支
					😄. 以上結論也可總結成:
						😄. CPI>1: 結餘
						😄. CPI=1: 剛好
						😄. CPI<1: 超支

|#############################################################################################################|
5. 市場策略和常見企業管理與經濟學
	A. 五力分析(Porter's Five Force) --->分析一個產業(或一個企業)的競爭環境
	reference:
	https://projectmanager.com.tw/%e5%b0%88%e6%a1%88%e7%ae%a1%e7%90%86/%e4%ba%94%e5%8a%9b%e5%88%86%e6%9e%90/
		a. 買家議價能力
		b. 供應商議價能力
		c. 替代產品(或服務)的威脅, 也可叫做被取代的威脅
		c. 新進者威脅
		d. 現有競爭者威脅

	B. SWOT(強弱危機分析) --- > 一樣是分析企業競爭環境
		a. Strengths
		b. Weaknesses
		c. Oppotunity
		d. Threads
	reference:
	https://zh.wikipedia.org/wiki/%E5%BC%B7%E5%BC%B1%E5%8D%B1%E6%A9%9F%E5%88%86%E6%9E%90

	c. 長鞭效應
	reference:
	https://zh.wikipedia.org/zh-tw/%E9%95%BF%E9%9E%AD%E6%95%88%E5%BA%94
		a. 簡單來說就是供應鏈越上游, 所需要準備的存貨波動"幅度"就越大
			I. 例如. 下游買電腦的, 預測需要多賣100台, 上游主機板提供商可以預計需要準備1000塊主機板, 類似這樣的概念

	d. 帕累托法则(二八法則)
		a. 簡單來說就是80%的貢獻來自20%, 例如"80％的销售额来自20％的客户", "80％的土地由20％的人口所有", "80%的豌豆产量来自20%的植株", "80% 銷售來自於比較熱門的20%產品"
		b. 此法則被視為商業界"鐵律"

	e. 長尾效應(The long Tail)
	reference:
	https://zh.wikipedia.org/zh-tw/%E9%95%BF%E5%B0%BE
		a. 長尾效應打破了二八法則, 尤其在網路商業模式中, 總結一句話: 網路技術大幅增加了小眾產品的曝光度和銷售機會，使得小眾市場的總體規模顯著擴大
